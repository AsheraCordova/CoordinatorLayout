//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidXJCoordinatorLayout\src\main\java\androidx\coordinatorlayout\widget\DirectedAcyclicGraph.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DirectedAcyclicGraph")
#ifdef RESTRICT_DirectedAcyclicGraph
#define INCLUDE_ALL_DirectedAcyclicGraph 0
#else
#define INCLUDE_ALL_DirectedAcyclicGraph 1
#endif
#undef RESTRICT_DirectedAcyclicGraph

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXDirectedAcyclicGraph_) && (INCLUDE_ALL_DirectedAcyclicGraph || defined(INCLUDE_ADXDirectedAcyclicGraph))
#define ADXDirectedAcyclicGraph_

@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaUtilArrayList;
@protocol JavaUtilList;

/*!
 @brief A class which represents a simple directed acyclic graph.
 */
@interface ADXDirectedAcyclicGraph : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Add an edge to the graph.
 <p>Both the given nodes should already have been added to the graph through 
 <code>addNode(Object)</code>.</p>
 @param node the parent node
 @param incomingEdge the node which has is an incoming edge to <code>node</code>
 */
- (void)addEdgeWithId:(id)node
               withId:(id)incomingEdge;

/*!
 @brief Add a node to the graph.
 <p>If the node already exists in the graph then this method is a no-op.</p>
 @param node the node to add
 */
- (void)addNodeWithId:(id)node;

/*!
 @brief Clears the internal graph, and releases resources to pools.
 */
- (void)clear;

/*!
 @brief Returns true if the node is already present in the graph, false otherwise.
 */
- (bool)containsWithId:(id)node;

/*!
 @brief Get any incoming edges from the given node.
 @return a new list containing any incoming edges, or <code>null</code> if there are none
 */
- (id<JavaUtilList>)getIncomingEdgesWithId:(id)node;

/*!
 @brief Get any outgoing edges for the given node (i.e.nodes which have an incoming edge
  from the given node).
 @return a new list containing any outgoing edges, or <code>null</code> if there are none
 */
- (id<JavaUtilList>)getOutgoingEdgesWithId:(id)node;

/*!
 @brief Returns a topologically sorted list of the nodes in this graph.This uses the DFS algorithm
  as described by Cormen et al. (2001).
 If this graph contains cyclic dependencies then this
  method will throw a <code>RuntimeException</code>.
  
 <p>The resulting list will be ordered such that index 0 will contain the node at the bottom
  of the graph. The node at the end of the list will have no dependencies on other nodes.</p>
 */
- (JavaUtilArrayList *)getSortedList;

/*!
 @brief Checks whether we have any outgoing edges for the given node (i.e.nodes which have
  an incoming edge from the given node).
 @return <code>true</code> if the node has any outgoing edges, <code>false</code>
  otherwise.
 */
- (bool)hasOutgoingEdgesWithId:(id)node;

#pragma mark Package-Private

/*!
 @brief Get any incoming edges from the given node.
 @return a list containing any incoming edges, or null if there are none.
 */
- (JavaUtilArrayList *)getIncomingEdgesInternalWithId:(id)node;

/*!
 @brief Returns the size of the graph
 */
- (int32_t)size;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXDirectedAcyclicGraph)

FOUNDATION_EXPORT void ADXDirectedAcyclicGraph_init(ADXDirectedAcyclicGraph *self);

FOUNDATION_EXPORT ADXDirectedAcyclicGraph *new_ADXDirectedAcyclicGraph_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXDirectedAcyclicGraph *create_ADXDirectedAcyclicGraph_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXDirectedAcyclicGraph)

@compatibility_alias AndroidxCoordinatorlayoutWidgetDirectedAcyclicGraph ADXDirectedAcyclicGraph;


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_DirectedAcyclicGraph")
