//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidXJCoordinatorLayout\src\main\java\androidx\coordinatorlayout\widget\CoordinatorLayout.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "CoordinatorLayout.h"
#include "DirectedAcyclicGraph.h"
#include "Gravity.h"
#include "GravityCompat.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "NestedScrollingParentHelper.h"
#include "Pools.h"
#include "Rect.h"
#include "Resources.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXCoordinatorLayout () {
 @public
  id<JavaUtilList> mDependencySortedChildren_;
  ADXDirectedAcyclicGraph *mChildDag_;
  IOSIntArray *mBehaviorConsumed_;
  IOSIntArray *mNestedScrollingV2ConsumedCompat_;
  bool mDisallowInterceptReset_;
  bool mIsAttachedToWindow_;
  IOSIntArray *mKeylines_;
  ADView *mNestedScrollingTarget_;
  bool mNeedsPreDrawListener_;
  ADXCoordinatorLayout_WindowInsetsCompat *mLastInsets_;
  bool mDrawStatusBarBackground_;
  ADXNestedScrollingParentHelper *mNestedScrollingParentHelper_;
}

+ (ADRect *)acquireTempRect;

+ (void)releaseTempRectWithADRect:(ADRect *)rect;

- (int32_t)getKeylineWithInt:(int32_t)index;

- (void)prepareChildren;

- (void)getDesiredAnchoredChildRectWithoutConstraintsWithInt:(int32_t)layoutDirection
                                                  withADRect:(ADRect *)anchorRect
                                                  withADRect:(ADRect *)outArg
                       withADXCoordinatorLayout_LayoutParams:(ADXCoordinatorLayout_LayoutParams *)lp
                                                     withInt:(int32_t)childWidth
                                                     withInt:(int32_t)childHeight;

- (void)constrainChildRectWithADXCoordinatorLayout_LayoutParams:(ADXCoordinatorLayout_LayoutParams *)lp
                                                     withADRect:(ADRect *)outArg
                                                        withInt:(int32_t)childWidth
                                                        withInt:(int32_t)childHeight;

- (void)layoutChildWithAnchorWithADView:(ADView *)child
                             withADView:(ADView *)anchor
                                withInt:(int32_t)layoutDirection;

- (void)layoutChildWithKeylineWithADView:(ADView *)child
                                 withInt:(int32_t)keyline
                                 withInt:(int32_t)layoutDirection;

- (void)layoutChildWithADView:(ADView *)child
                      withInt:(int32_t)layoutDirection;

+ (int32_t)resolveGravityWithInt:(int32_t)gravity;

+ (int32_t)resolveKeylineGravityWithInt:(int32_t)gravity;

+ (int32_t)resolveAnchoredChildGravityWithInt:(int32_t)gravity;

- (void)offsetChildByInsetWithADView:(ADView *)child
                          withADRect:(ADRect *)inset
                             withInt:(int32_t)layoutDirection;

- (void)setInsetOffsetXWithADView:(ADView *)child
                          withInt:(int32_t)offsetX;

- (void)setInsetOffsetYWithADView:(ADView *)child
                          withInt:(int32_t)offsetY;

- (bool)hasDependenciesWithADView:(ADView *)child;

@end

J2OBJC_FIELD_SETTER(ADXCoordinatorLayout, mDependencySortedChildren_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ADXCoordinatorLayout, mChildDag_, ADXDirectedAcyclicGraph *)
J2OBJC_FIELD_SETTER(ADXCoordinatorLayout, mBehaviorConsumed_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXCoordinatorLayout, mNestedScrollingV2ConsumedCompat_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXCoordinatorLayout, mKeylines_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXCoordinatorLayout, mNestedScrollingTarget_, ADView *)
J2OBJC_FIELD_SETTER(ADXCoordinatorLayout, mLastInsets_, ADXCoordinatorLayout_WindowInsetsCompat *)
J2OBJC_FIELD_SETTER(ADXCoordinatorLayout, mNestedScrollingParentHelper_, ADXNestedScrollingParentHelper *)

inline int32_t ADXCoordinatorLayout_get_TYPE_ON_INTERCEPT(void);
#define ADXCoordinatorLayout_TYPE_ON_INTERCEPT 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXCoordinatorLayout, TYPE_ON_INTERCEPT, int32_t)

inline int32_t ADXCoordinatorLayout_get_TYPE_ON_TOUCH(void);
#define ADXCoordinatorLayout_TYPE_ON_TOUCH 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXCoordinatorLayout, TYPE_ON_TOUCH, int32_t)

inline id<ADPools_Pool> ADXCoordinatorLayout_get_sRectPool(void);
static id<ADPools_Pool> ADXCoordinatorLayout_sRectPool;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXCoordinatorLayout, sRectPool, id<ADPools_Pool>)

__attribute__((unused)) static ADRect *ADXCoordinatorLayout_acquireTempRect(void);

__attribute__((unused)) static void ADXCoordinatorLayout_releaseTempRectWithADRect_(ADRect *rect);

__attribute__((unused)) static int32_t ADXCoordinatorLayout_getKeylineWithInt_(ADXCoordinatorLayout *self, int32_t index);

__attribute__((unused)) static void ADXCoordinatorLayout_prepareChildren(ADXCoordinatorLayout *self);

__attribute__((unused)) static void ADXCoordinatorLayout_getDesiredAnchoredChildRectWithoutConstraintsWithInt_withADRect_withADRect_withADXCoordinatorLayout_LayoutParams_withInt_withInt_(ADXCoordinatorLayout *self, int32_t layoutDirection, ADRect *anchorRect, ADRect *outArg, ADXCoordinatorLayout_LayoutParams *lp, int32_t childWidth, int32_t childHeight);

__attribute__((unused)) static void ADXCoordinatorLayout_constrainChildRectWithADXCoordinatorLayout_LayoutParams_withADRect_withInt_withInt_(ADXCoordinatorLayout *self, ADXCoordinatorLayout_LayoutParams *lp, ADRect *outArg, int32_t childWidth, int32_t childHeight);

__attribute__((unused)) static void ADXCoordinatorLayout_layoutChildWithAnchorWithADView_withADView_withInt_(ADXCoordinatorLayout *self, ADView *child, ADView *anchor, int32_t layoutDirection);

__attribute__((unused)) static void ADXCoordinatorLayout_layoutChildWithKeylineWithADView_withInt_withInt_(ADXCoordinatorLayout *self, ADView *child, int32_t keyline, int32_t layoutDirection);

__attribute__((unused)) static void ADXCoordinatorLayout_layoutChildWithADView_withInt_(ADXCoordinatorLayout *self, ADView *child, int32_t layoutDirection);

__attribute__((unused)) static int32_t ADXCoordinatorLayout_resolveGravityWithInt_(int32_t gravity);

__attribute__((unused)) static int32_t ADXCoordinatorLayout_resolveKeylineGravityWithInt_(int32_t gravity);

__attribute__((unused)) static int32_t ADXCoordinatorLayout_resolveAnchoredChildGravityWithInt_(int32_t gravity);

__attribute__((unused)) static void ADXCoordinatorLayout_onChildViewsChangedWithInt_(ADXCoordinatorLayout *self, int32_t type);

__attribute__((unused)) static void ADXCoordinatorLayout_offsetChildByInsetWithADView_withADRect_withInt_(ADXCoordinatorLayout *self, ADView *child, ADRect *inset, int32_t layoutDirection);

__attribute__((unused)) static void ADXCoordinatorLayout_setInsetOffsetXWithADView_withInt_(ADXCoordinatorLayout *self, ADView *child, int32_t offsetX);

__attribute__((unused)) static void ADXCoordinatorLayout_setInsetOffsetYWithADView_withInt_(ADXCoordinatorLayout *self, ADView *child, int32_t offsetY);

__attribute__((unused)) static bool ADXCoordinatorLayout_hasDependenciesWithADView_(ADXCoordinatorLayout *self, ADView *child);

@interface ADXCoordinatorLayout_AttachedBehavior : NSObject

@end

@interface ADXCoordinatorLayout_LayoutParams () {
 @public
  bool mDidBlockInteraction_;
  bool mDidAcceptNestedScrollTouch_;
  bool mDidAcceptNestedScrollNonTouch_;
  bool mDidChangeAfterNestedScroll_;
}

- (void)resolveAnchorViewWithADView:(ADView *)forChild
           withADXCoordinatorLayout:(ADXCoordinatorLayout *)parent;

- (bool)verifyAnchorViewWithADView:(ADView *)forChild
          withADXCoordinatorLayout:(ADXCoordinatorLayout *)parent;

- (bool)shouldDodgeWithADView:(ADView *)other
                      withInt:(int32_t)layoutDirection;

@end

__attribute__((unused)) static void ADXCoordinatorLayout_LayoutParams_resolveAnchorViewWithADView_withADXCoordinatorLayout_(ADXCoordinatorLayout_LayoutParams *self, ADView *forChild, ADXCoordinatorLayout *parent);

__attribute__((unused)) static bool ADXCoordinatorLayout_LayoutParams_verifyAnchorViewWithADView_withADXCoordinatorLayout_(ADXCoordinatorLayout_LayoutParams *self, ADView *forChild, ADXCoordinatorLayout *parent);

__attribute__((unused)) static bool ADXCoordinatorLayout_LayoutParams_shouldDodgeWithADView_withInt_(ADXCoordinatorLayout_LayoutParams *self, ADView *other, int32_t layoutDirection);

J2OBJC_INITIALIZED_DEFN(ADXCoordinatorLayout)

NSString *ADXCoordinatorLayout_TAG = @"CoordinatorLayout";

@implementation ADXCoordinatorLayout

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCoordinatorLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ADRect *)acquireTempRect {
  return ADXCoordinatorLayout_acquireTempRect();
}

+ (void)releaseTempRectWithADRect:(ADRect *)rect {
  ADXCoordinatorLayout_releaseTempRectWithADRect_(rect);
}

- (int32_t)getKeylineWithInt:(int32_t)index {
  return ADXCoordinatorLayout_getKeylineWithInt_(self, index);
}

- (void)prepareChildren {
  ADXCoordinatorLayout_prepareChildren(self);
}

- (void)getDescendantRectWithADView:(ADView *)descendant
                         withADRect:(ADRect *)outArg {
  ADXCoordinatorLayout_ViewGroupUtils_getDescendantRectWithADXCoordinatorLayout_withADView_withADRect_(self, descendant, outArg);
}

- (void)onMeasureChildWithADView:(ADView *)child
                         withInt:(int32_t)parentWidthMeasureSpec
                         withInt:(int32_t)widthUsed
                         withInt:(int32_t)parentHeightMeasureSpec
                         withInt:(int32_t)heightUsed {
  [self measureChildWithMarginsWithADView:child withInt:parentWidthMeasureSpec withInt:widthUsed withInt:parentHeightMeasureSpec withInt:heightUsed];
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  ADXCoordinatorLayout_prepareChildren(self);
  [self ensurePreDrawListener];
  int32_t paddingLeft = [self getPaddingLeft];
  int32_t paddingTop = [self getPaddingTop];
  int32_t paddingRight = [self getPaddingRight];
  int32_t paddingBottom = [self getPaddingBottom];
  int32_t layoutDirection = ADXViewCompat_getLayoutDirectionWithADView_(self);
  bool isRtl = layoutDirection == ADXViewCompat_LAYOUT_DIRECTION_RTL;
  int32_t widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  int32_t widthSize = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  int32_t heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  int32_t heightSize = ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  int32_t widthPadding = paddingLeft + paddingRight;
  int32_t heightPadding = paddingTop + paddingBottom;
  int32_t widthUsed = [self getSuggestedMinimumWidth];
  int32_t heightUsed = [self getSuggestedMinimumHeight];
  int32_t childState = 0;
  bool applyInsets = mLastInsets_ != nil && ADXViewCompat_getFitsSystemWindowsWithADView_(self);
  int32_t childCount = [((id<JavaUtilList>) nil_chk(mDependencySortedChildren_)) size];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = [mDependencySortedChildren_ getWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    int32_t keylineWidthUsed = 0;
    if (((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->keyline_ >= 0 && widthMode != ADView_MeasureSpec_UNSPECIFIED) {
      int32_t keylinePos = ADXCoordinatorLayout_getKeylineWithInt_(self, lp->keyline_);
      int32_t keylineGravity = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(ADXCoordinatorLayout_resolveKeylineGravityWithInt_(lp->gravity_), layoutDirection) & ADGravity_HORIZONTAL_GRAVITY_MASK;
      if ((keylineGravity == ADGravity_LEFT && !isRtl) || (keylineGravity == ADGravity_RIGHT && isRtl)) {
        keylineWidthUsed = JavaLangMath_maxWithInt_withInt_(0, widthSize - paddingRight - keylinePos);
      }
      else if ((keylineGravity == ADGravity_RIGHT && !isRtl) || (keylineGravity == ADGravity_LEFT && isRtl)) {
        keylineWidthUsed = JavaLangMath_maxWithInt_withInt_(0, keylinePos - paddingLeft);
      }
    }
    int32_t childWidthMeasureSpec = widthMeasureSpec;
    int32_t childHeightMeasureSpec = heightMeasureSpec;
    if (applyInsets && !ADXViewCompat_getFitsSystemWindowsWithADView_(child)) {
      int32_t horizInsets = [((ADXCoordinatorLayout_WindowInsetsCompat *) nil_chk(mLastInsets_)) getSystemWindowInsetLeft] + [((ADXCoordinatorLayout_WindowInsetsCompat *) nil_chk(mLastInsets_)) getSystemWindowInsetRight];
      int32_t vertInsets = [((ADXCoordinatorLayout_WindowInsetsCompat *) nil_chk(mLastInsets_)) getSystemWindowInsetTop] + [((ADXCoordinatorLayout_WindowInsetsCompat *) nil_chk(mLastInsets_)) getSystemWindowInsetBottom];
      childWidthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(widthSize - horizInsets, widthMode);
      childHeightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(heightSize - vertInsets, heightMode);
    }
    ADXCoordinatorLayout_Behavior *b = [lp getBehavior];
    if (b == nil || ![b onMeasureChildWithADXCoordinatorLayout:self withADView:child withInt:childWidthMeasureSpec withInt:keylineWidthUsed withInt:childHeightMeasureSpec withInt:0]) {
      [self onMeasureChildWithADView:child withInt:childWidthMeasureSpec withInt:keylineWidthUsed withInt:childHeightMeasureSpec withInt:0];
    }
    widthUsed = JavaLangMath_maxWithInt_withInt_(widthUsed, widthPadding + [child getMeasuredWidth] + lp->leftMargin_ + lp->rightMargin_);
    heightUsed = JavaLangMath_maxWithInt_withInt_(heightUsed, heightPadding + [child getMeasuredHeight] + lp->topMargin_ + lp->bottomMargin_);
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState]);
  }
  int32_t width = ADView_resolveSizeAndStateWithInt_withInt_withInt_(widthUsed, widthMeasureSpec, childState & ADView_MEASURED_STATE_MASK);
  int32_t height = ADView_resolveSizeAndStateWithInt_withInt_withInt_(heightUsed, heightMeasureSpec, JreLShift32(childState, ADView_MEASURED_HEIGHT_STATE_SHIFT));
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (void)onLayoutChildWithADView:(ADView *)child
                        withInt:(int32_t)layoutDirection {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  if ([((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) checkAnchorChanged]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"An anchor may not be changed after CoordinatorLayout measurement begins before layout is complete.");
  }
  if (lp->mAnchorView_ != nil) {
    ADXCoordinatorLayout_layoutChildWithAnchorWithADView_withADView_withInt_(self, child, lp->mAnchorView_, layoutDirection);
  }
  else if (lp->keyline_ >= 0) {
    ADXCoordinatorLayout_layoutChildWithKeylineWithADView_withInt_withInt_(self, child, lp->keyline_, layoutDirection);
  }
  else {
    ADXCoordinatorLayout_layoutChildWithADView_withInt_(self, child, layoutDirection);
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  int32_t layoutDirection = ADXViewCompat_getLayoutDirectionWithADView_(self);
  int32_t childCount = [((id<JavaUtilList>) nil_chk(mDependencySortedChildren_)) size];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = [mDependencySortedChildren_ getWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    ADXCoordinatorLayout_Behavior *behavior = [((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) getBehavior];
    if (behavior == nil || ![behavior onLayoutChildWithADXCoordinatorLayout:self withADView:child withInt:layoutDirection]) {
      [self onLayoutChildWithADView:child withInt:layoutDirection];
    }
  }
}

- (void)recordLastChildRectWithADView:(ADView *)child
                           withADRect:(ADRect *)r {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  [((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) setLastChildRectWithADRect:r];
}

- (void)getLastChildRectWithADView:(ADView *)child
                        withADRect:(ADRect *)outArg {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  [((ADRect *) nil_chk(outArg)) setWithADRect:[((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) getLastChildRect]];
}

- (void)getChildRectWithADView:(ADView *)child
                   withBoolean:(bool)transform
                    withADRect:(ADRect *)outArg {
  if ([((ADView *) nil_chk(child)) isLayoutRequested] || [child getVisibility] == ADView_GONE) {
    [((ADRect *) nil_chk(outArg)) setEmpty];
    return;
  }
  if (transform) {
    [self getDescendantRectWithADView:child withADRect:outArg];
  }
  else {
    [((ADRect *) nil_chk(outArg)) setWithInt:[child getLeft] withInt:[child getTop] withInt:[child getRight] withInt:[child getBottom]];
  }
}

- (void)getDesiredAnchoredChildRectWithoutConstraintsWithInt:(int32_t)layoutDirection
                                                  withADRect:(ADRect *)anchorRect
                                                  withADRect:(ADRect *)outArg
                       withADXCoordinatorLayout_LayoutParams:(ADXCoordinatorLayout_LayoutParams *)lp
                                                     withInt:(int32_t)childWidth
                                                     withInt:(int32_t)childHeight {
  ADXCoordinatorLayout_getDesiredAnchoredChildRectWithoutConstraintsWithInt_withADRect_withADRect_withADXCoordinatorLayout_LayoutParams_withInt_withInt_(self, layoutDirection, anchorRect, outArg, lp, childWidth, childHeight);
}

- (void)constrainChildRectWithADXCoordinatorLayout_LayoutParams:(ADXCoordinatorLayout_LayoutParams *)lp
                                                     withADRect:(ADRect *)outArg
                                                        withInt:(int32_t)childWidth
                                                        withInt:(int32_t)childHeight {
  ADXCoordinatorLayout_constrainChildRectWithADXCoordinatorLayout_LayoutParams_withADRect_withInt_withInt_(self, lp, outArg, childWidth, childHeight);
}

- (void)getDesiredAnchoredChildRectWithADView:(ADView *)child
                                      withInt:(int32_t)layoutDirection
                                   withADRect:(ADRect *)anchorRect
                                   withADRect:(ADRect *)outArg {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  int32_t childWidth = [child getMeasuredWidth];
  int32_t childHeight = [child getMeasuredHeight];
  ADXCoordinatorLayout_getDesiredAnchoredChildRectWithoutConstraintsWithInt_withADRect_withADRect_withADXCoordinatorLayout_LayoutParams_withInt_withInt_(self, layoutDirection, anchorRect, outArg, lp, childWidth, childHeight);
  ADXCoordinatorLayout_constrainChildRectWithADXCoordinatorLayout_LayoutParams_withADRect_withInt_withInt_(self, lp, outArg, childWidth, childHeight);
}

- (void)layoutChildWithAnchorWithADView:(ADView *)child
                             withADView:(ADView *)anchor
                                withInt:(int32_t)layoutDirection {
  ADXCoordinatorLayout_layoutChildWithAnchorWithADView_withADView_withInt_(self, child, anchor, layoutDirection);
}

- (void)layoutChildWithKeylineWithADView:(ADView *)child
                                 withInt:(int32_t)keyline
                                 withInt:(int32_t)layoutDirection {
  ADXCoordinatorLayout_layoutChildWithKeylineWithADView_withInt_withInt_(self, child, keyline, layoutDirection);
}

- (void)layoutChildWithADView:(ADView *)child
                      withInt:(int32_t)layoutDirection {
  ADXCoordinatorLayout_layoutChildWithADView_withInt_(self, child, layoutDirection);
}

+ (int32_t)resolveGravityWithInt:(int32_t)gravity {
  return ADXCoordinatorLayout_resolveGravityWithInt_(gravity);
}

+ (int32_t)resolveKeylineGravityWithInt:(int32_t)gravity {
  return ADXCoordinatorLayout_resolveKeylineGravityWithInt_(gravity);
}

+ (int32_t)resolveAnchoredChildGravityWithInt:(int32_t)gravity {
  return ADXCoordinatorLayout_resolveAnchoredChildGravityWithInt_(gravity);
}

- (void)onChildViewsChangedWithInt:(int32_t)type {
  ADXCoordinatorLayout_onChildViewsChangedWithInt_(self, type);
}

- (void)offsetChildByInsetWithADView:(ADView *)child
                          withADRect:(ADRect *)inset
                             withInt:(int32_t)layoutDirection {
  ADXCoordinatorLayout_offsetChildByInsetWithADView_withADRect_withInt_(self, child, inset, layoutDirection);
}

- (void)setInsetOffsetXWithADView:(ADView *)child
                          withInt:(int32_t)offsetX {
  ADXCoordinatorLayout_setInsetOffsetXWithADView_withInt_(self, child, offsetX);
}

- (void)setInsetOffsetYWithADView:(ADView *)child
                          withInt:(int32_t)offsetY {
  ADXCoordinatorLayout_setInsetOffsetYWithADView_withInt_(self, child, offsetY);
}

- (void)dispatchDependentViewsChangedWithADView:(ADView *)view {
  id<JavaUtilList> dependents = [((ADXDirectedAcyclicGraph *) nil_chk(mChildDag_)) getIncomingEdgesInternalWithId:view];
  if (dependents != nil && ![dependents isEmpty]) {
    for (int32_t i = 0; i < [dependents size]; i++) {
      ADView *child = [dependents getWithInt:i];
      ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
      ADXCoordinatorLayout_Behavior *b = JreRetainedLocalValue([((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) getBehavior]);
      if (b != nil) {
        [b onDependentViewChangedWithADXCoordinatorLayout:self withADView:child withADView:view];
      }
    }
  }
}

- (id<JavaUtilList>)getDependenciesWithADView:(ADView *)child {
  id<JavaUtilList> result = JreRetainedLocalValue([((ADXDirectedAcyclicGraph *) nil_chk(mChildDag_)) getOutgoingEdgesWithId:child]);
  return result == nil ? JavaUtilCollections_emptyList() : result;
}

- (void)ensurePreDrawListener {
  bool hasDependencies = false;
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if (ADXCoordinatorLayout_hasDependenciesWithADView_(self, child)) {
      hasDependencies = true;
      break;
    }
  }
  if (hasDependencies != mNeedsPreDrawListener_) {
    if (hasDependencies) {
      [self addPreDrawListener];
    }
    else {
      [self removePreDrawListener];
    }
  }
}

- (bool)hasDependenciesWithADView:(ADView *)child {
  return ADXCoordinatorLayout_hasDependenciesWithADView_(self, child);
}

- (void)offsetChildToAnchorWithADView:(ADView *)child
                              withInt:(int32_t)layoutDirection {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  if (((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->mAnchorView_ != nil) {
    ADRect *anchorRect = ADXCoordinatorLayout_acquireTempRect();
    ADRect *childRect = ADXCoordinatorLayout_acquireTempRect();
    ADRect *desiredChildRect = ADXCoordinatorLayout_acquireTempRect();
    [self getDescendantRectWithADView:lp->mAnchorView_ withADRect:anchorRect];
    [self getChildRectWithADView:child withBoolean:false withADRect:childRect];
    int32_t childWidth = [child getMeasuredWidth];
    int32_t childHeight = [child getMeasuredHeight];
    ADXCoordinatorLayout_getDesiredAnchoredChildRectWithoutConstraintsWithInt_withADRect_withADRect_withADXCoordinatorLayout_LayoutParams_withInt_withInt_(self, layoutDirection, anchorRect, desiredChildRect, lp, childWidth, childHeight);
    bool changed = ((ADRect *) nil_chk(desiredChildRect))->left_ != ((ADRect *) nil_chk(childRect))->left_ || desiredChildRect->top_ != childRect->top_;
    ADXCoordinatorLayout_constrainChildRectWithADXCoordinatorLayout_LayoutParams_withADRect_withInt_withInt_(self, lp, desiredChildRect, childWidth, childHeight);
    int32_t dx = desiredChildRect->left_ - childRect->left_;
    int32_t dy = desiredChildRect->top_ - childRect->top_;
    if (dx != 0) {
      ADXViewCompat_offsetLeftAndRightWithADView_withInt_(child, dx);
    }
    if (dy != 0) {
      ADXViewCompat_offsetTopAndBottomWithADView_withInt_(child, dy);
    }
    if (changed) {
      ADXCoordinatorLayout_Behavior *b = [lp getBehavior];
      if (b != nil) {
        [b onDependentViewChangedWithADXCoordinatorLayout:self withADView:child withADView:lp->mAnchorView_];
      }
    }
    ADXCoordinatorLayout_releaseTempRectWithADRect_(anchorRect);
    ADXCoordinatorLayout_releaseTempRectWithADRect_(childRect);
    ADXCoordinatorLayout_releaseTempRectWithADRect_(desiredChildRect);
  }
}

- (bool)onStartNestedScrollWithADView:(ADView *)child
                           withADView:(ADView *)target
                              withInt:(int32_t)nestedScrollAxes {
  return [self onStartNestedScrollWithADView:child withADView:target withInt:nestedScrollAxes withInt:ADXViewCompat_TYPE_TOUCH];
}

- (bool)onStartNestedScrollWithADView:(ADView *)child
                           withADView:(ADView *)target
                              withInt:(int32_t)axes
                              withInt:(int32_t)type {
  bool handled = false;
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *view = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(view)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    ADXCoordinatorLayout_Behavior *viewBehavior = [((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) getBehavior];
    if (viewBehavior != nil) {
      bool accepted = [viewBehavior onStartNestedScrollWithADXCoordinatorLayout:self withADView:view withADView:child withADView:target withInt:axes withInt:type];
      handled |= accepted;
      [lp setNestedScrollAcceptedWithInt:type withBoolean:accepted];
    }
    else {
      [lp setNestedScrollAcceptedWithInt:type withBoolean:false];
    }
  }
  return handled;
}

- (void)onNestedScrollAcceptedWithADView:(ADView *)child
                              withADView:(ADView *)target
                                 withInt:(int32_t)axes {
  [self onNestedScrollAcceptedWithADView:child withADView:target withInt:axes withInt:ADXViewCompat_TYPE_TOUCH];
}

- (void)onNestedScrollAcceptedWithADView:(ADView *)child
                              withADView:(ADView *)target
                                 withInt:(int32_t)axes
                                 withInt:(int32_t)type {
  [((ADXNestedScrollingParentHelper *) nil_chk(mNestedScrollingParentHelper_)) onNestedScrollAcceptedWithADView:child withADView:target withInt:axes withInt:type];
  JreStrongAssign(&mNestedScrollingTarget_, target);
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *view = [self getChildAtWithInt:i];
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    if (![((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) isNestedScrollAcceptedWithInt:type]) {
      continue;
    }
    ADXCoordinatorLayout_Behavior *viewBehavior = [lp getBehavior];
    if (viewBehavior != nil) {
      [viewBehavior onNestedScrollAcceptedWithADXCoordinatorLayout:self withADView:view withADView:child withADView:target withInt:axes withInt:type];
    }
  }
}

- (void)onStopNestedScrollWithADView:(ADView *)target {
  [self onStopNestedScrollWithADView:target withInt:ADXViewCompat_TYPE_TOUCH];
}

- (void)onStopNestedScrollWithADView:(ADView *)target
                             withInt:(int32_t)type {
  [((ADXNestedScrollingParentHelper *) nil_chk(mNestedScrollingParentHelper_)) onStopNestedScrollWithADView:target withInt:type];
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *view = [self getChildAtWithInt:i];
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    if (![((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) isNestedScrollAcceptedWithInt:type]) {
      continue;
    }
    ADXCoordinatorLayout_Behavior *viewBehavior = [lp getBehavior];
    if (viewBehavior != nil) {
      [viewBehavior onStopNestedScrollWithADXCoordinatorLayout:self withADView:view withADView:target withInt:type];
    }
    [lp resetNestedScrollWithInt:type];
    [lp resetChangedAfterNestedScroll];
  }
  JreStrongAssign(&mNestedScrollingTarget_, nil);
}

- (void)onNestedScrollWithADView:(ADView *)target
                         withInt:(int32_t)dxConsumed
                         withInt:(int32_t)dyConsumed
                         withInt:(int32_t)dxUnconsumed
                         withInt:(int32_t)dyUnconsumed {
  [self onNestedScrollWithADView:target withInt:dxConsumed withInt:dyConsumed withInt:dxUnconsumed withInt:dyUnconsumed withInt:ADXViewCompat_TYPE_TOUCH];
}

- (void)onNestedScrollWithADView:(ADView *)target
                         withInt:(int32_t)dxConsumed
                         withInt:(int32_t)dyConsumed
                         withInt:(int32_t)dxUnconsumed
                         withInt:(int32_t)dyUnconsumed
                         withInt:(int32_t)type {
  [self onNestedScrollWithADView:target withInt:dxConsumed withInt:dyConsumed withInt:dxUnconsumed withInt:dyUnconsumed withInt:ADXViewCompat_TYPE_TOUCH withIntArray:mNestedScrollingV2ConsumedCompat_];
}

- (void)onNestedScrollWithADView:(ADView *)target
                         withInt:(int32_t)dxConsumed
                         withInt:(int32_t)dyConsumed
                         withInt:(int32_t)dxUnconsumed
                         withInt:(int32_t)dyUnconsumed
                         withInt:(int32_t)type
                    withIntArray:(IOSIntArray *)consumed {
  int32_t childCount = [self getChildCount];
  bool accepted = false;
  int32_t xConsumed = 0;
  int32_t yConsumed = 0;
  for (int32_t i = 0; i < childCount; i++) {
    ADView *view = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(view)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    if (![((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) isNestedScrollAcceptedWithInt:type]) {
      continue;
    }
    ADXCoordinatorLayout_Behavior *viewBehavior = [lp getBehavior];
    if (viewBehavior != nil) {
      *IOSIntArray_GetRef(nil_chk(mBehaviorConsumed_), 0) = 0;
      *IOSIntArray_GetRef(mBehaviorConsumed_, 1) = 0;
      [viewBehavior onNestedScrollWithADXCoordinatorLayout:self withADView:view withADView:target withInt:dxConsumed withInt:dyConsumed withInt:dxUnconsumed withInt:dyUnconsumed withInt:type withIntArray:mBehaviorConsumed_];
      xConsumed = dxUnconsumed > 0 ? JavaLangMath_maxWithInt_withInt_(xConsumed, IOSIntArray_Get(mBehaviorConsumed_, 0)) : JavaLangMath_minWithInt_withInt_(xConsumed, IOSIntArray_Get(mBehaviorConsumed_, 0));
      yConsumed = dyUnconsumed > 0 ? JavaLangMath_maxWithInt_withInt_(yConsumed, IOSIntArray_Get(mBehaviorConsumed_, 1)) : JavaLangMath_minWithInt_withInt_(yConsumed, IOSIntArray_Get(mBehaviorConsumed_, 1));
      accepted = true;
    }
  }
  *IOSIntArray_GetRef(nil_chk(consumed), 0) += xConsumed;
  *IOSIntArray_GetRef(consumed, 1) += yConsumed;
  if (accepted) {
    ADXCoordinatorLayout_onChildViewsChangedWithInt_(self, ADXCoordinatorLayout_EVENT_NESTED_SCROLL);
  }
}

- (void)onNestedPreScrollWithADView:(ADView *)target
                            withInt:(int32_t)dx
                            withInt:(int32_t)dy
                       withIntArray:(IOSIntArray *)consumed {
  [self onNestedPreScrollWithADView:target withInt:dx withInt:dy withIntArray:consumed withInt:ADXViewCompat_TYPE_TOUCH];
}

- (void)onNestedPreScrollWithADView:(ADView *)target
                            withInt:(int32_t)dx
                            withInt:(int32_t)dy
                       withIntArray:(IOSIntArray *)consumed
                            withInt:(int32_t)type {
  int32_t xConsumed = 0;
  int32_t yConsumed = 0;
  bool accepted = false;
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *view = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(view)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    if (![((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) isNestedScrollAcceptedWithInt:type]) {
      continue;
    }
    ADXCoordinatorLayout_Behavior *viewBehavior = [lp getBehavior];
    if (viewBehavior != nil) {
      *IOSIntArray_GetRef(nil_chk(mBehaviorConsumed_), 0) = 0;
      *IOSIntArray_GetRef(mBehaviorConsumed_, 1) = 0;
      [viewBehavior onNestedPreScrollWithADXCoordinatorLayout:self withADView:view withADView:target withInt:dx withInt:dy withIntArray:mBehaviorConsumed_ withInt:type];
      xConsumed = dx > 0 ? JavaLangMath_maxWithInt_withInt_(xConsumed, IOSIntArray_Get(mBehaviorConsumed_, 0)) : JavaLangMath_minWithInt_withInt_(xConsumed, IOSIntArray_Get(mBehaviorConsumed_, 0));
      yConsumed = dy > 0 ? JavaLangMath_maxWithInt_withInt_(yConsumed, IOSIntArray_Get(mBehaviorConsumed_, 1)) : JavaLangMath_minWithInt_withInt_(yConsumed, IOSIntArray_Get(mBehaviorConsumed_, 1));
      accepted = true;
    }
  }
  *IOSIntArray_GetRef(nil_chk(consumed), 0) = xConsumed;
  *IOSIntArray_GetRef(consumed, 1) = yConsumed;
  if (accepted) {
    ADXCoordinatorLayout_onChildViewsChangedWithInt_(self, ADXCoordinatorLayout_EVENT_NESTED_SCROLL);
  }
}

- (bool)onNestedFlingWithADView:(ADView *)target
                      withFloat:(float)velocityX
                      withFloat:(float)velocityY
                    withBoolean:(bool)consumed {
  bool handled = false;
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *view = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(view)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    if (![((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) isNestedScrollAcceptedWithInt:ADXViewCompat_TYPE_TOUCH]) {
      continue;
    }
    ADXCoordinatorLayout_Behavior *viewBehavior = [lp getBehavior];
    if (viewBehavior != nil) {
      handled |= [viewBehavior onNestedFlingWithADXCoordinatorLayout:self withADView:view withADView:target withFloat:velocityX withFloat:velocityY withBoolean:consumed];
    }
  }
  if (handled) {
    ADXCoordinatorLayout_onChildViewsChangedWithInt_(self, ADXCoordinatorLayout_EVENT_NESTED_SCROLL);
  }
  return handled;
}

- (bool)onNestedPreFlingWithADView:(ADView *)target
                         withFloat:(float)velocityX
                         withFloat:(float)velocityY {
  bool handled = false;
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *view = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(view)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    if (![((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) isNestedScrollAcceptedWithInt:ADXViewCompat_TYPE_TOUCH]) {
      continue;
    }
    ADXCoordinatorLayout_Behavior *viewBehavior = [lp getBehavior];
    if (viewBehavior != nil) {
      handled |= [viewBehavior onNestedPreFlingWithADXCoordinatorLayout:self withADView:view withADView:target withFloat:velocityX withFloat:velocityY];
    }
  }
  return handled;
}

- (int32_t)getNestedScrollAxes {
  return [((ADXNestedScrollingParentHelper *) nil_chk(mNestedScrollingParentHelper_)) getNestedScrollAxes];
}

- (void)setKeyLinesWithIntArray:(IOSIntArray *)keyLines {
  JreStrongAssign(&mKeylines_, keyLines);
}

- (ADXCoordinatorLayout_LayoutParams *)getResolvedLayoutParamsWithADView:(ADView *)child {
  ADXCoordinatorLayout_LayoutParams *result = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  if (!((ADXCoordinatorLayout_LayoutParams *) nil_chk(result))->mBehaviorResolved_) {
    if ([ADXCoordinatorLayout_AttachedBehavior_class_() isInstance:child]) {
      ADXCoordinatorLayout_Behavior *attachedBehavior = JreRetainedLocalValue([((id<ADXCoordinatorLayout_AttachedBehavior>) cast_check(child, ADXCoordinatorLayout_AttachedBehavior_class_())) getBehavior]);
      if (attachedBehavior == nil) {
        ADLog_eWithNSString_withNSString_(ADXCoordinatorLayout_TAG, @"Attached behavior class is null");
      }
      [result setBehaviorWithADXCoordinatorLayout_Behavior:attachedBehavior];
      result->mBehaviorResolved_ = true;
    }
  }
  result->mBehaviorResolved_ = true;
  return result;
}

- (void)addPreDrawListener {
}

- (void)removePreDrawListener {
}

- (void)dealloc {
  RELEASE_(mDependencySortedChildren_);
  RELEASE_(mChildDag_);
  RELEASE_(mBehaviorConsumed_);
  RELEASE_(mNestedScrollingV2ConsumedCompat_);
  RELEASE_(mKeylines_);
  RELEASE_(mNestedScrollingTarget_);
  RELEASE_(mLastInsets_);
  RELEASE_(mNestedScrollingParentHelper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADRect;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 11, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 29, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 30, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 31, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 32, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 39, 38, -1, 40, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 41, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 42, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 43, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 52, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "LADXCoordinatorLayout_LayoutParams;", 0x0, 59, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acquireTempRect);
  methods[2].selector = @selector(releaseTempRectWithADRect:);
  methods[3].selector = @selector(getKeylineWithInt:);
  methods[4].selector = @selector(prepareChildren);
  methods[5].selector = @selector(getDescendantRectWithADView:withADRect:);
  methods[6].selector = @selector(onMeasureChildWithADView:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(onMeasureWithInt:withInt:);
  methods[8].selector = @selector(onLayoutChildWithADView:withInt:);
  methods[9].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[10].selector = @selector(recordLastChildRectWithADView:withADRect:);
  methods[11].selector = @selector(getLastChildRectWithADView:withADRect:);
  methods[12].selector = @selector(getChildRectWithADView:withBoolean:withADRect:);
  methods[13].selector = @selector(getDesiredAnchoredChildRectWithoutConstraintsWithInt:withADRect:withADRect:withADXCoordinatorLayout_LayoutParams:withInt:withInt:);
  methods[14].selector = @selector(constrainChildRectWithADXCoordinatorLayout_LayoutParams:withADRect:withInt:withInt:);
  methods[15].selector = @selector(getDesiredAnchoredChildRectWithADView:withInt:withADRect:withADRect:);
  methods[16].selector = @selector(layoutChildWithAnchorWithADView:withADView:withInt:);
  methods[17].selector = @selector(layoutChildWithKeylineWithADView:withInt:withInt:);
  methods[18].selector = @selector(layoutChildWithADView:withInt:);
  methods[19].selector = @selector(resolveGravityWithInt:);
  methods[20].selector = @selector(resolveKeylineGravityWithInt:);
  methods[21].selector = @selector(resolveAnchoredChildGravityWithInt:);
  methods[22].selector = @selector(onChildViewsChangedWithInt:);
  methods[23].selector = @selector(offsetChildByInsetWithADView:withADRect:withInt:);
  methods[24].selector = @selector(setInsetOffsetXWithADView:withInt:);
  methods[25].selector = @selector(setInsetOffsetYWithADView:withInt:);
  methods[26].selector = @selector(dispatchDependentViewsChangedWithADView:);
  methods[27].selector = @selector(getDependenciesWithADView:);
  methods[28].selector = @selector(ensurePreDrawListener);
  methods[29].selector = @selector(hasDependenciesWithADView:);
  methods[30].selector = @selector(offsetChildToAnchorWithADView:withInt:);
  methods[31].selector = @selector(onStartNestedScrollWithADView:withADView:withInt:);
  methods[32].selector = @selector(onStartNestedScrollWithADView:withADView:withInt:withInt:);
  methods[33].selector = @selector(onNestedScrollAcceptedWithADView:withADView:withInt:);
  methods[34].selector = @selector(onNestedScrollAcceptedWithADView:withADView:withInt:withInt:);
  methods[35].selector = @selector(onStopNestedScrollWithADView:);
  methods[36].selector = @selector(onStopNestedScrollWithADView:withInt:);
  methods[37].selector = @selector(onNestedScrollWithADView:withInt:withInt:withInt:withInt:);
  methods[38].selector = @selector(onNestedScrollWithADView:withInt:withInt:withInt:withInt:withInt:);
  methods[39].selector = @selector(onNestedScrollWithADView:withInt:withInt:withInt:withInt:withInt:withIntArray:);
  methods[40].selector = @selector(onNestedPreScrollWithADView:withInt:withInt:withIntArray:);
  methods[41].selector = @selector(onNestedPreScrollWithADView:withInt:withInt:withIntArray:withInt:);
  methods[42].selector = @selector(onNestedFlingWithADView:withFloat:withFloat:withBoolean:);
  methods[43].selector = @selector(onNestedPreFlingWithADView:withFloat:withFloat:);
  methods[44].selector = @selector(getNestedScrollAxes);
  methods[45].selector = @selector(setKeyLinesWithIntArray:);
  methods[46].selector = @selector(getResolvedLayoutParamsWithADView:);
  methods[47].selector = @selector(addPreDrawListener);
  methods[48].selector = @selector(removePreDrawListener);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 60, -1, -1 },
    { "TYPE_ON_INTERCEPT", "I", .constantValue.asInt = ADXCoordinatorLayout_TYPE_ON_INTERCEPT, 0x1a, -1, -1, -1, -1 },
    { "TYPE_ON_TOUCH", "I", .constantValue.asInt = ADXCoordinatorLayout_TYPE_ON_TOUCH, 0x1a, -1, -1, -1, -1 },
    { "EVENT_PRE_DRAW", "I", .constantValue.asInt = ADXCoordinatorLayout_EVENT_PRE_DRAW, 0x18, -1, -1, -1, -1 },
    { "EVENT_NESTED_SCROLL", "I", .constantValue.asInt = ADXCoordinatorLayout_EVENT_NESTED_SCROLL, 0x18, -1, -1, -1, -1 },
    { "EVENT_VIEW_REMOVED", "I", .constantValue.asInt = ADXCoordinatorLayout_EVENT_VIEW_REMOVED, 0x18, -1, -1, -1, -1 },
    { "sRectPool", "LADPools_Pool;", .constantValue.asLong = 0, 0x1a, -1, 61, 62, -1 },
    { "mDependencySortedChildren_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 63, -1 },
    { "mChildDag_", "LADXDirectedAcyclicGraph;", .constantValue.asLong = 0, 0x12, -1, -1, 64, -1 },
    { "mBehaviorConsumed_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mNestedScrollingV2ConsumedCompat_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDisallowInterceptReset_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsAttachedToWindow_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mKeylines_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNestedScrollingTarget_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNeedsPreDrawListener_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastInsets_", "LADXCoordinatorLayout_WindowInsetsCompat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDrawStatusBarBackground_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNestedScrollingParentHelper_", "LADXNestedScrollingParentHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "releaseTempRect", "LADRect;", "getKeyline", "I", "getDescendantRect", "LADView;LADRect;", "onMeasureChild", "LADView;IIII", "onMeasure", "II", "onLayoutChild", "LADView;I", "onLayout", "ZIIII", "recordLastChildRect", "getLastChildRect", "getChildRect", "LADView;ZLADRect;", "getDesiredAnchoredChildRectWithoutConstraints", "ILADRect;LADRect;LADXCoordinatorLayout_LayoutParams;II", "constrainChildRect", "LADXCoordinatorLayout_LayoutParams;LADRect;II", "getDesiredAnchoredChildRect", "LADView;ILADRect;LADRect;", "layoutChildWithAnchor", "LADView;LADView;I", "layoutChildWithKeyline", "LADView;II", "layoutChild", "resolveGravity", "resolveKeylineGravity", "resolveAnchoredChildGravity", "onChildViewsChanged", "offsetChildByInset", "LADView;LADRect;I", "setInsetOffsetX", "setInsetOffsetY", "dispatchDependentViewsChanged", "LADView;", "getDependencies", "(Lr/android/view/View;)Ljava/util/List<Lr/android/view/View;>;", "hasDependencies", "offsetChildToAnchor", "onStartNestedScroll", "LADView;LADView;II", "onNestedScrollAccepted", "onStopNestedScroll", "onNestedScroll", "LADView;IIIII", "LADView;IIIII[I", "onNestedPreScroll", "LADView;II[I", "LADView;II[II", "onNestedFling", "LADView;FFZ", "onNestedPreFling", "LADView;FF", "setKeyLines", "[I", "getResolvedLayoutParams", &ADXCoordinatorLayout_TAG, &ADXCoordinatorLayout_sRectPool, "Lr/android/util/Pools$Pool<Lr/android/graphics/Rect;>;", "Ljava/util/List<Lr/android/view/View;>;", "Landroidx/coordinatorlayout/widget/DirectedAcyclicGraph<Lr/android/view/View;>;", "LADXCoordinatorLayout_AttachedBehavior;LADXCoordinatorLayout_Behavior;LADXCoordinatorLayout_LayoutParams;LADXCoordinatorLayout_WindowInsetsCompat;LADXCoordinatorLayout_ViewGroupUtils;" };
  static const J2ObjcClassInfo _ADXCoordinatorLayout = { "CoordinatorLayout", "androidx.coordinatorlayout.widget", ptrTable, methods, fields, 7, 0x1, 49, 19, -1, 65, -1, -1, -1 };
  return &_ADXCoordinatorLayout;
}

+ (void)initialize {
  if (self == [ADXCoordinatorLayout class]) {
    JreStrongAssignAndConsume(&ADXCoordinatorLayout_sRectPool, new_ADPools_SynchronizedPool_initWithInt_(12));
    J2OBJC_SET_INITIALIZED(ADXCoordinatorLayout)
  }
}

@end

void ADXCoordinatorLayout_init(ADXCoordinatorLayout *self) {
  ADViewGroup_init(self);
  JreStrongAssignAndConsume(&self->mDependencySortedChildren_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mChildDag_, new_ADXDirectedAcyclicGraph_init());
  JreStrongAssignAndConsume(&self->mBehaviorConsumed_, [IOSIntArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mNestedScrollingV2ConsumedCompat_, [IOSIntArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mNestedScrollingParentHelper_, new_ADXNestedScrollingParentHelper_initWithADViewGroup_(self));
}

ADXCoordinatorLayout *new_ADXCoordinatorLayout_init() {
  J2OBJC_NEW_IMPL(ADXCoordinatorLayout, init)
}

ADXCoordinatorLayout *create_ADXCoordinatorLayout_init() {
  J2OBJC_CREATE_IMPL(ADXCoordinatorLayout, init)
}

ADRect *ADXCoordinatorLayout_acquireTempRect() {
  ADXCoordinatorLayout_initialize();
  ADRect *rect = JreRetainedLocalValue([((id<ADPools_Pool>) nil_chk(ADXCoordinatorLayout_sRectPool)) acquire]);
  if (rect == nil) {
    rect = create_ADRect_init();
  }
  return rect;
}

void ADXCoordinatorLayout_releaseTempRectWithADRect_(ADRect *rect) {
  ADXCoordinatorLayout_initialize();
  [((ADRect *) nil_chk(rect)) setEmpty];
  [((id<ADPools_Pool>) nil_chk(ADXCoordinatorLayout_sRectPool)) release__WithId:rect];
}

int32_t ADXCoordinatorLayout_getKeylineWithInt_(ADXCoordinatorLayout *self, int32_t index) {
  if (self->mKeylines_ == nil) {
    ADLog_eWithNSString_withNSString_(ADXCoordinatorLayout_TAG, JreStrcat("$@$I", @"No keylines defined for ", self, @" - attempted index lookup ", index));
    return 0;
  }
  if (index < 0 || index >= self->mKeylines_->size_) {
    ADLog_eWithNSString_withNSString_(ADXCoordinatorLayout_TAG, JreStrcat("$I$@", @"Keyline index ", index, @" out of range for ", self));
    return 0;
  }
  return IOSIntArray_Get(self->mKeylines_, index);
}

void ADXCoordinatorLayout_prepareChildren(ADXCoordinatorLayout *self) {
  [((id<JavaUtilList>) nil_chk(self->mDependencySortedChildren_)) clear];
  [((ADXDirectedAcyclicGraph *) nil_chk(self->mChildDag_)) clear];
  for (int32_t i = 0, count = [self getChildCount]; i < count; i++) {
    ADView *view = [self getChildAtWithInt:i];
    ADXCoordinatorLayout_LayoutParams *lp = [self getResolvedLayoutParamsWithADView:view];
    [((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) findAnchorViewWithADXCoordinatorLayout:self withADView:view];
    [self->mChildDag_ addNodeWithId:view];
    for (int32_t j = 0; j < count; j++) {
      if (j == i) {
        continue;
      }
      ADView *other = [self getChildAtWithInt:j];
      if ([lp dependsOnWithADXCoordinatorLayout:self withADView:view withADView:other]) {
        if (![self->mChildDag_ containsWithId:other]) {
          [self->mChildDag_ addNodeWithId:other];
        }
        [self->mChildDag_ addEdgeWithId:other withId:view];
      }
    }
  }
  [self->mDependencySortedChildren_ addAllWithJavaUtilCollection:[self->mChildDag_ getSortedList]];
  JavaUtilCollections_reverseWithJavaUtilList_(self->mDependencySortedChildren_);
}

void ADXCoordinatorLayout_getDesiredAnchoredChildRectWithoutConstraintsWithInt_withADRect_withADRect_withADXCoordinatorLayout_LayoutParams_withInt_withInt_(ADXCoordinatorLayout *self, int32_t layoutDirection, ADRect *anchorRect, ADRect *outArg, ADXCoordinatorLayout_LayoutParams *lp, int32_t childWidth, int32_t childHeight) {
  int32_t absGravity = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(ADXCoordinatorLayout_resolveAnchoredChildGravityWithInt_(((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->gravity_), layoutDirection);
  int32_t absAnchorGravity = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(ADXCoordinatorLayout_resolveGravityWithInt_(lp->anchorGravity_), layoutDirection);
  int32_t hgrav = absGravity & ADGravity_HORIZONTAL_GRAVITY_MASK;
  int32_t vgrav = absGravity & ADGravity_VERTICAL_GRAVITY_MASK;
  int32_t anchorHgrav = absAnchorGravity & ADGravity_HORIZONTAL_GRAVITY_MASK;
  int32_t anchorVgrav = absAnchorGravity & ADGravity_VERTICAL_GRAVITY_MASK;
  int32_t left;
  int32_t top;
  switch (anchorHgrav) {
    default:
    case ADGravity_LEFT:
    left = ((ADRect *) nil_chk(anchorRect))->left_;
    break;
    case ADGravity_RIGHT:
    left = ((ADRect *) nil_chk(anchorRect))->right_;
    break;
    case ADGravity_CENTER_HORIZONTAL:
    left = ((ADRect *) nil_chk(anchorRect))->left_ + JreIntDiv([anchorRect width], 2);
    break;
  }
  switch (anchorVgrav) {
    default:
    case ADGravity_TOP:
    top = ((ADRect *) nil_chk(anchorRect))->top_;
    break;
    case ADGravity_BOTTOM:
    top = ((ADRect *) nil_chk(anchorRect))->bottom_;
    break;
    case ADGravity_CENTER_VERTICAL:
    top = ((ADRect *) nil_chk(anchorRect))->top_ + JreIntDiv([anchorRect height], 2);
    break;
  }
  switch (hgrav) {
    default:
    case ADGravity_LEFT:
    left -= childWidth;
    break;
    case ADGravity_RIGHT:
    break;
    case ADGravity_CENTER_HORIZONTAL:
    left -= JreIntDiv(childWidth, 2);
    break;
  }
  switch (vgrav) {
    default:
    case ADGravity_TOP:
    top -= childHeight;
    break;
    case ADGravity_BOTTOM:
    break;
    case ADGravity_CENTER_VERTICAL:
    top -= JreIntDiv(childHeight, 2);
    break;
  }
  [((ADRect *) nil_chk(outArg)) setWithInt:left withInt:top withInt:left + childWidth withInt:top + childHeight];
}

void ADXCoordinatorLayout_constrainChildRectWithADXCoordinatorLayout_LayoutParams_withADRect_withInt_withInt_(ADXCoordinatorLayout *self, ADXCoordinatorLayout_LayoutParams *lp, ADRect *outArg, int32_t childWidth, int32_t childHeight) {
  int32_t width = [self getWidth];
  int32_t height = [self getHeight];
  int32_t left = JavaLangMath_maxWithInt_withInt_([self getPaddingLeft] + ((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->leftMargin_, JavaLangMath_minWithInt_withInt_(((ADRect *) nil_chk(outArg))->left_, width - [self getPaddingRight] - childWidth - lp->rightMargin_));
  int32_t top = JavaLangMath_maxWithInt_withInt_([self getPaddingTop] + lp->topMargin_, JavaLangMath_minWithInt_withInt_(outArg->top_, height - [self getPaddingBottom] - childHeight - lp->bottomMargin_));
  [outArg setWithInt:left withInt:top withInt:left + childWidth withInt:top + childHeight];
}

void ADXCoordinatorLayout_layoutChildWithAnchorWithADView_withADView_withInt_(ADXCoordinatorLayout *self, ADView *child, ADView *anchor, int32_t layoutDirection) {
  ADRect *anchorRect = ADXCoordinatorLayout_acquireTempRect();
  ADRect *childRect = ADXCoordinatorLayout_acquireTempRect();
  @try {
    [self getDescendantRectWithADView:anchor withADRect:anchorRect];
    [self getDesiredAnchoredChildRectWithADView:child withInt:layoutDirection withADRect:anchorRect withADRect:childRect];
    [((ADView *) nil_chk(child)) layoutWithInt:((ADRect *) nil_chk(childRect))->left_ withInt:childRect->top_ withInt:childRect->right_ withInt:childRect->bottom_];
  }
  @finally {
    ADXCoordinatorLayout_releaseTempRectWithADRect_(anchorRect);
    ADXCoordinatorLayout_releaseTempRectWithADRect_(childRect);
  }
}

void ADXCoordinatorLayout_layoutChildWithKeylineWithADView_withInt_withInt_(ADXCoordinatorLayout *self, ADView *child, int32_t keyline, int32_t layoutDirection) {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  int32_t absGravity = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(ADXCoordinatorLayout_resolveKeylineGravityWithInt_(((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->gravity_), layoutDirection);
  int32_t hgrav = absGravity & ADGravity_HORIZONTAL_GRAVITY_MASK;
  int32_t vgrav = absGravity & ADGravity_VERTICAL_GRAVITY_MASK;
  int32_t width = [self getWidth];
  int32_t height = [self getHeight];
  int32_t childWidth = [child getMeasuredWidth];
  int32_t childHeight = [child getMeasuredHeight];
  if (layoutDirection == ADXViewCompat_LAYOUT_DIRECTION_RTL) {
    keyline = width - keyline;
  }
  int32_t left = ADXCoordinatorLayout_getKeylineWithInt_(self, keyline) - childWidth;
  int32_t top = 0;
  switch (hgrav) {
    default:
    case ADGravity_LEFT:
    break;
    case ADGravity_RIGHT:
    left += childWidth;
    break;
    case ADGravity_CENTER_HORIZONTAL:
    left += JreIntDiv(childWidth, 2);
    break;
  }
  switch (vgrav) {
    default:
    case ADGravity_TOP:
    break;
    case ADGravity_BOTTOM:
    top += childHeight;
    break;
    case ADGravity_CENTER_VERTICAL:
    top += JreIntDiv(childHeight, 2);
    break;
  }
  left = JavaLangMath_maxWithInt_withInt_([self getPaddingLeft] + lp->leftMargin_, JavaLangMath_minWithInt_withInt_(left, width - [self getPaddingRight] - childWidth - lp->rightMargin_));
  top = JavaLangMath_maxWithInt_withInt_([self getPaddingTop] + lp->topMargin_, JavaLangMath_minWithInt_withInt_(top, height - [self getPaddingBottom] - childHeight - lp->bottomMargin_));
  [child layoutWithInt:left withInt:top withInt:left + childWidth withInt:top + childHeight];
}

void ADXCoordinatorLayout_layoutChildWithADView_withInt_(ADXCoordinatorLayout *self, ADView *child, int32_t layoutDirection) {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  ADRect *parent = ADXCoordinatorLayout_acquireTempRect();
  [((ADRect *) nil_chk(parent)) setWithInt:[self getPaddingLeft] + ((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->leftMargin_ withInt:[self getPaddingTop] + lp->topMargin_ withInt:[self getWidth] - [self getPaddingRight] - lp->rightMargin_ withInt:[self getHeight] - [self getPaddingBottom] - lp->bottomMargin_];
  if (self->mLastInsets_ != nil && ADXViewCompat_getFitsSystemWindowsWithADView_(self) && !ADXViewCompat_getFitsSystemWindowsWithADView_(child)) {
    parent->left_ += [self->mLastInsets_ getSystemWindowInsetLeft];
    parent->top_ += [((ADXCoordinatorLayout_WindowInsetsCompat *) nil_chk(self->mLastInsets_)) getSystemWindowInsetTop];
    parent->right_ -= [((ADXCoordinatorLayout_WindowInsetsCompat *) nil_chk(self->mLastInsets_)) getSystemWindowInsetRight];
    parent->bottom_ -= [((ADXCoordinatorLayout_WindowInsetsCompat *) nil_chk(self->mLastInsets_)) getSystemWindowInsetBottom];
  }
  ADRect *out = ADXCoordinatorLayout_acquireTempRect();
  ADXGravityCompat_applyWithInt_withInt_withInt_withADRect_withADRect_withInt_(ADXCoordinatorLayout_resolveGravityWithInt_(lp->gravity_), [child getMeasuredWidth], [child getMeasuredHeight], parent, out, layoutDirection);
  [child layoutWithInt:((ADRect *) nil_chk(out))->left_ withInt:out->top_ withInt:out->right_ withInt:out->bottom_];
  ADXCoordinatorLayout_releaseTempRectWithADRect_(parent);
  ADXCoordinatorLayout_releaseTempRectWithADRect_(out);
}

int32_t ADXCoordinatorLayout_resolveGravityWithInt_(int32_t gravity) {
  ADXCoordinatorLayout_initialize();
  if ((gravity & ADGravity_HORIZONTAL_GRAVITY_MASK) == ADGravity_NO_GRAVITY) {
    gravity |= ADXGravityCompat_START;
  }
  if ((gravity & ADGravity_VERTICAL_GRAVITY_MASK) == ADGravity_NO_GRAVITY) {
    gravity |= ADGravity_TOP;
  }
  return gravity;
}

int32_t ADXCoordinatorLayout_resolveKeylineGravityWithInt_(int32_t gravity) {
  ADXCoordinatorLayout_initialize();
  return gravity == ADGravity_NO_GRAVITY ? ADXGravityCompat_END | ADGravity_TOP : gravity;
}

int32_t ADXCoordinatorLayout_resolveAnchoredChildGravityWithInt_(int32_t gravity) {
  ADXCoordinatorLayout_initialize();
  return gravity == ADGravity_NO_GRAVITY ? ADGravity_CENTER : gravity;
}

void ADXCoordinatorLayout_onChildViewsChangedWithInt_(ADXCoordinatorLayout *self, int32_t type) {
  int32_t layoutDirection = ADXViewCompat_getLayoutDirectionWithADView_(self);
  int32_t childCount = [((id<JavaUtilList>) nil_chk(self->mDependencySortedChildren_)) size];
  ADRect *inset = ADXCoordinatorLayout_acquireTempRect();
  ADRect *drawRect = ADXCoordinatorLayout_acquireTempRect();
  ADRect *lastDrawRect = ADXCoordinatorLayout_acquireTempRect();
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = [self->mDependencySortedChildren_ getWithInt:i];
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    if (type == ADXCoordinatorLayout_EVENT_PRE_DRAW && [child getVisibility] == ADView_GONE) {
      continue;
    }
    for (int32_t j = 0; j < i; j++) {
      ADView *checkChild = [self->mDependencySortedChildren_ getWithInt:j];
      if (JreObjectEqualsEquals(((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->mAnchorDirectChild_, checkChild)) {
        [self offsetChildToAnchorWithADView:child withInt:layoutDirection];
      }
    }
    [self getChildRectWithADView:child withBoolean:true withADRect:drawRect];
    if (((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->insetEdge_ != ADGravity_NO_GRAVITY && ![((ADRect *) nil_chk(drawRect)) isEmpty]) {
      int32_t absInsetEdge = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(lp->insetEdge_, layoutDirection);
      switch (absInsetEdge & ADGravity_VERTICAL_GRAVITY_MASK) {
        case ADGravity_TOP:
        ((ADRect *) nil_chk(inset))->top_ = JavaLangMath_maxWithInt_withInt_(inset->top_, ((ADRect *) nil_chk(drawRect))->bottom_);
        break;
        case ADGravity_BOTTOM:
        ((ADRect *) nil_chk(inset))->bottom_ = JavaLangMath_maxWithInt_withInt_(inset->bottom_, [self getHeight] - ((ADRect *) nil_chk(drawRect))->top_);
        break;
      }
      switch (absInsetEdge & ADGravity_HORIZONTAL_GRAVITY_MASK) {
        case ADGravity_LEFT:
        ((ADRect *) nil_chk(inset))->left_ = JavaLangMath_maxWithInt_withInt_(inset->left_, ((ADRect *) nil_chk(drawRect))->right_);
        break;
        case ADGravity_RIGHT:
        ((ADRect *) nil_chk(inset))->right_ = JavaLangMath_maxWithInt_withInt_(inset->right_, [self getWidth] - ((ADRect *) nil_chk(drawRect))->left_);
        break;
      }
    }
    if (lp->dodgeInsetEdges_ != ADGravity_NO_GRAVITY && [child getVisibility] == ADView_VISIBLE) {
      ADXCoordinatorLayout_offsetChildByInsetWithADView_withADRect_withInt_(self, child, inset, layoutDirection);
    }
    if (type != ADXCoordinatorLayout_EVENT_VIEW_REMOVED) {
      [self getLastChildRectWithADView:child withADRect:lastDrawRect];
      if ([((ADRect *) nil_chk(lastDrawRect)) isEqual:drawRect]) {
        continue;
      }
      [self recordLastChildRectWithADView:child withADRect:drawRect];
    }
    for (int32_t j = i + 1; j < childCount; j++) {
      ADView *checkChild = [self->mDependencySortedChildren_ getWithInt:j];
      ADXCoordinatorLayout_LayoutParams *checkLp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(checkChild)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
      ADXCoordinatorLayout_Behavior *b = [((ADXCoordinatorLayout_LayoutParams *) nil_chk(checkLp)) getBehavior];
      if (b != nil && [b layoutDependsOnWithADXCoordinatorLayout:self withADView:checkChild withADView:child]) {
        if (type == ADXCoordinatorLayout_EVENT_PRE_DRAW && [checkLp getChangedAfterNestedScroll]) {
          [checkLp resetChangedAfterNestedScroll];
          continue;
        }
        bool handled;
        switch (type) {
          case ADXCoordinatorLayout_EVENT_VIEW_REMOVED:
          [b onDependentViewRemovedWithADXCoordinatorLayout:self withADView:checkChild withADView:child];
          handled = true;
          break;
          default:
          handled = [b onDependentViewChangedWithADXCoordinatorLayout:self withADView:checkChild withADView:child];
          break;
        }
        if (type == ADXCoordinatorLayout_EVENT_NESTED_SCROLL) {
          [checkLp setChangedAfterNestedScrollWithBoolean:handled];
        }
      }
    }
  }
  ADXCoordinatorLayout_releaseTempRectWithADRect_(inset);
  ADXCoordinatorLayout_releaseTempRectWithADRect_(drawRect);
  ADXCoordinatorLayout_releaseTempRectWithADRect_(lastDrawRect);
}

void ADXCoordinatorLayout_offsetChildByInsetWithADView_withADRect_withInt_(ADXCoordinatorLayout *self, ADView *child, ADRect *inset, int32_t layoutDirection) {
  if (!ADXViewCompat_isLaidOutWithADView_(child)) {
    return;
  }
  if ([((ADView *) nil_chk(child)) getWidth] <= 0 || [child getHeight] <= 0) {
    return;
  }
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  ADXCoordinatorLayout_Behavior *behavior = [((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) getBehavior];
  ADRect *dodgeRect = ADXCoordinatorLayout_acquireTempRect();
  ADRect *bounds = ADXCoordinatorLayout_acquireTempRect();
  [((ADRect *) nil_chk(bounds)) setWithInt:[child getLeft] withInt:[child getTop] withInt:[child getRight] withInt:[child getBottom]];
  if (behavior != nil && [behavior getInsetDodgeRectWithADXCoordinatorLayout:self withADView:child withADRect:dodgeRect]) {
    if (![bounds containsWithADRect:dodgeRect]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Rect should be within the child's bounds. Rect:", [((ADRect *) nil_chk(dodgeRect)) toShortString], @" | Bounds:", [bounds toShortString]));
    }
  }
  else {
    [((ADRect *) nil_chk(dodgeRect)) setWithADRect:bounds];
  }
  ADXCoordinatorLayout_releaseTempRectWithADRect_(bounds);
  if ([((ADRect *) nil_chk(dodgeRect)) isEmpty]) {
    ADXCoordinatorLayout_releaseTempRectWithADRect_(dodgeRect);
    return;
  }
  int32_t absDodgeInsetEdges = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(lp->dodgeInsetEdges_, layoutDirection);
  bool offsetY = false;
  if ((absDodgeInsetEdges & ADGravity_TOP) == ADGravity_TOP) {
    int32_t distance = dodgeRect->top_ - lp->topMargin_ - lp->mInsetOffsetY_;
    if (distance < ((ADRect *) nil_chk(inset))->top_) {
      ADXCoordinatorLayout_setInsetOffsetYWithADView_withInt_(self, child, inset->top_ - distance);
      offsetY = true;
    }
  }
  if ((absDodgeInsetEdges & ADGravity_BOTTOM) == ADGravity_BOTTOM) {
    int32_t distance = [self getHeight] - dodgeRect->bottom_ - lp->bottomMargin_ + lp->mInsetOffsetY_;
    if (distance < ((ADRect *) nil_chk(inset))->bottom_) {
      ADXCoordinatorLayout_setInsetOffsetYWithADView_withInt_(self, child, distance - inset->bottom_);
      offsetY = true;
    }
  }
  if (!offsetY) {
    ADXCoordinatorLayout_setInsetOffsetYWithADView_withInt_(self, child, 0);
  }
  bool offsetX = false;
  if ((absDodgeInsetEdges & ADGravity_LEFT) == ADGravity_LEFT) {
    int32_t distance = dodgeRect->left_ - lp->leftMargin_ - lp->mInsetOffsetX_;
    if (distance < ((ADRect *) nil_chk(inset))->left_) {
      ADXCoordinatorLayout_setInsetOffsetXWithADView_withInt_(self, child, inset->left_ - distance);
      offsetX = true;
    }
  }
  if ((absDodgeInsetEdges & ADGravity_RIGHT) == ADGravity_RIGHT) {
    int32_t distance = [self getWidth] - dodgeRect->right_ - lp->rightMargin_ + lp->mInsetOffsetX_;
    if (distance < ((ADRect *) nil_chk(inset))->right_) {
      ADXCoordinatorLayout_setInsetOffsetXWithADView_withInt_(self, child, distance - inset->right_);
      offsetX = true;
    }
  }
  if (!offsetX) {
    ADXCoordinatorLayout_setInsetOffsetXWithADView_withInt_(self, child, 0);
  }
  ADXCoordinatorLayout_releaseTempRectWithADRect_(dodgeRect);
}

void ADXCoordinatorLayout_setInsetOffsetXWithADView_withInt_(ADXCoordinatorLayout *self, ADView *child, int32_t offsetX) {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  if (((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->mInsetOffsetX_ != offsetX) {
    int32_t dx = offsetX - lp->mInsetOffsetX_;
    ADXViewCompat_offsetLeftAndRightWithADView_withInt_(child, dx);
    lp->mInsetOffsetX_ = offsetX;
  }
}

void ADXCoordinatorLayout_setInsetOffsetYWithADView_withInt_(ADXCoordinatorLayout *self, ADView *child, int32_t offsetY) {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  if (((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->mInsetOffsetY_ != offsetY) {
    int32_t dy = offsetY - lp->mInsetOffsetY_;
    ADXViewCompat_offsetTopAndBottomWithADView_withInt_(child, dy);
    lp->mInsetOffsetY_ = offsetY;
  }
}

bool ADXCoordinatorLayout_hasDependenciesWithADView_(ADXCoordinatorLayout *self, ADView *child) {
  return [((ADXDirectedAcyclicGraph *) nil_chk(self->mChildDag_)) hasOutgoingEdgesWithId:child];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCoordinatorLayout)

J2OBJC_NAME_MAPPING(ADXCoordinatorLayout, "androidx.coordinatorlayout.widget", "ADX")

@implementation ADXCoordinatorLayout_AttachedBehavior

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXCoordinatorLayout_Behavior;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getBehavior);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXCoordinatorLayout;" };
  static const J2ObjcClassInfo _ADXCoordinatorLayout_AttachedBehavior = { "AttachedBehavior", "androidx.coordinatorlayout.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_ADXCoordinatorLayout_AttachedBehavior;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXCoordinatorLayout_AttachedBehavior)

@implementation ADXCoordinatorLayout_Behavior

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCoordinatorLayout_Behavior_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onAttachedToLayoutParamsWithADXCoordinatorLayout_LayoutParams:(ADXCoordinatorLayout_LayoutParams *)params {
}

- (void)onDetachedFromLayoutParams {
}

- (bool)layoutDependsOnWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                     withADView:(ADView *)child
                                     withADView:(ADView *)dependency {
  return false;
}

- (bool)onDependentViewChangedWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                            withADView:(ADView *)child
                                            withADView:(ADView *)dependency {
  return false;
}

- (void)onDependentViewRemovedWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                            withADView:(ADView *)child
                                            withADView:(ADView *)dependency {
}

- (bool)onMeasureChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                    withADView:(ADView *)child
                                       withInt:(int32_t)parentWidthMeasureSpec
                                       withInt:(int32_t)widthUsed
                                       withInt:(int32_t)parentHeightMeasureSpec
                                       withInt:(int32_t)heightUsed {
  return false;
}

- (bool)onLayoutChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                   withADView:(ADView *)child
                                      withInt:(int32_t)layoutDirection {
  return false;
}

- (bool)onStartNestedScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                         withADView:(ADView *)child
                                         withADView:(ADView *)directTargetChild
                                         withADView:(ADView *)target
                                            withInt:(int32_t)axes {
  return false;
}

- (bool)onStartNestedScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                         withADView:(ADView *)child
                                         withADView:(ADView *)directTargetChild
                                         withADView:(ADView *)target
                                            withInt:(int32_t)axes
                                            withInt:(int32_t)type {
  if (type == ADXViewCompat_TYPE_TOUCH) {
    return [self onStartNestedScrollWithADXCoordinatorLayout:coordinatorLayout withADView:child withADView:directTargetChild withADView:target withInt:axes];
  }
  return false;
}

- (void)onNestedScrollAcceptedWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                            withADView:(ADView *)child
                                            withADView:(ADView *)directTargetChild
                                            withADView:(ADView *)target
                                               withInt:(int32_t)axes {
}

- (void)onNestedScrollAcceptedWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                            withADView:(ADView *)child
                                            withADView:(ADView *)directTargetChild
                                            withADView:(ADView *)target
                                               withInt:(int32_t)axes
                                               withInt:(int32_t)type {
  if (type == ADXViewCompat_TYPE_TOUCH) {
    [self onNestedScrollAcceptedWithADXCoordinatorLayout:coordinatorLayout withADView:child withADView:directTargetChild withADView:target withInt:axes];
  }
}

- (void)onStopNestedScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                        withADView:(ADView *)child
                                        withADView:(ADView *)target {
}

- (void)onStopNestedScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                        withADView:(ADView *)child
                                        withADView:(ADView *)target
                                           withInt:(int32_t)type {
  if (type == ADXViewCompat_TYPE_TOUCH) {
    [self onStopNestedScrollWithADXCoordinatorLayout:coordinatorLayout withADView:child withADView:target];
  }
}

- (void)onNestedScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                    withADView:(ADView *)child
                                    withADView:(ADView *)target
                                       withInt:(int32_t)dxConsumed
                                       withInt:(int32_t)dyConsumed
                                       withInt:(int32_t)dxUnconsumed
                                       withInt:(int32_t)dyUnconsumed {
}

- (void)onNestedScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                    withADView:(ADView *)child
                                    withADView:(ADView *)target
                                       withInt:(int32_t)dxConsumed
                                       withInt:(int32_t)dyConsumed
                                       withInt:(int32_t)dxUnconsumed
                                       withInt:(int32_t)dyUnconsumed
                                       withInt:(int32_t)type {
  if (type == ADXViewCompat_TYPE_TOUCH) {
    [self onNestedScrollWithADXCoordinatorLayout:coordinatorLayout withADView:child withADView:target withInt:dxConsumed withInt:dyConsumed withInt:dxUnconsumed withInt:dyUnconsumed];
  }
}

- (void)onNestedScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                    withADView:(ADView *)child
                                    withADView:(ADView *)target
                                       withInt:(int32_t)dxConsumed
                                       withInt:(int32_t)dyConsumed
                                       withInt:(int32_t)dxUnconsumed
                                       withInt:(int32_t)dyUnconsumed
                                       withInt:(int32_t)type
                                  withIntArray:(IOSIntArray *)consumed {
  *IOSIntArray_GetRef(nil_chk(consumed), 0) += dxUnconsumed;
  *IOSIntArray_GetRef(consumed, 1) += dyUnconsumed;
  [self onNestedScrollWithADXCoordinatorLayout:coordinatorLayout withADView:child withADView:target withInt:dxConsumed withInt:dyConsumed withInt:dxUnconsumed withInt:dyUnconsumed withInt:type];
}

- (void)onNestedPreScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                       withADView:(ADView *)child
                                       withADView:(ADView *)target
                                          withInt:(int32_t)dx
                                          withInt:(int32_t)dy
                                     withIntArray:(IOSIntArray *)consumed {
}

- (void)onNestedPreScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                       withADView:(ADView *)child
                                       withADView:(ADView *)target
                                          withInt:(int32_t)dx
                                          withInt:(int32_t)dy
                                     withIntArray:(IOSIntArray *)consumed
                                          withInt:(int32_t)type {
  if (type == ADXViewCompat_TYPE_TOUCH) {
    [self onNestedPreScrollWithADXCoordinatorLayout:coordinatorLayout withADView:child withADView:target withInt:dx withInt:dy withIntArray:consumed];
  }
}

- (bool)onNestedFlingWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                   withADView:(ADView *)child
                                   withADView:(ADView *)target
                                    withFloat:(float)velocityX
                                    withFloat:(float)velocityY
                                  withBoolean:(bool)consumed {
  return false;
}

- (bool)onNestedPreFlingWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                      withADView:(ADView *)child
                                      withADView:(ADView *)target
                                       withFloat:(float)velocityX
                                       withFloat:(float)velocityY {
  return false;
}

- (bool)getInsetDodgeRectWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                       withADView:(ADView *)child
                                       withADRect:(ADRect *)rect {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "Z", 0x1, 14, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 19, 15, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 19, 17, -1, 21, -1, -1 },
    { NULL, "V", 0x1, 22, 3, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, 25, 28, -1, 29, -1, -1 },
    { NULL, "V", 0x1, 25, 30, -1, 31, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, 34, -1, -1 },
    { NULL, "V", 0x1, 32, 35, -1, 36, -1, -1 },
    { NULL, "Z", 0x1, 37, 38, -1, 39, -1, -1 },
    { NULL, "Z", 0x1, 40, 41, -1, 42, -1, -1 },
    { NULL, "Z", 0x1, 43, 44, -1, 45, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onAttachedToLayoutParamsWithADXCoordinatorLayout_LayoutParams:);
  methods[2].selector = @selector(onDetachedFromLayoutParams);
  methods[3].selector = @selector(layoutDependsOnWithADXCoordinatorLayout:withADView:withADView:);
  methods[4].selector = @selector(onDependentViewChangedWithADXCoordinatorLayout:withADView:withADView:);
  methods[5].selector = @selector(onDependentViewRemovedWithADXCoordinatorLayout:withADView:withADView:);
  methods[6].selector = @selector(onMeasureChildWithADXCoordinatorLayout:withADView:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(onLayoutChildWithADXCoordinatorLayout:withADView:withInt:);
  methods[8].selector = @selector(onStartNestedScrollWithADXCoordinatorLayout:withADView:withADView:withADView:withInt:);
  methods[9].selector = @selector(onStartNestedScrollWithADXCoordinatorLayout:withADView:withADView:withADView:withInt:withInt:);
  methods[10].selector = @selector(onNestedScrollAcceptedWithADXCoordinatorLayout:withADView:withADView:withADView:withInt:);
  methods[11].selector = @selector(onNestedScrollAcceptedWithADXCoordinatorLayout:withADView:withADView:withADView:withInt:withInt:);
  methods[12].selector = @selector(onStopNestedScrollWithADXCoordinatorLayout:withADView:withADView:);
  methods[13].selector = @selector(onStopNestedScrollWithADXCoordinatorLayout:withADView:withADView:withInt:);
  methods[14].selector = @selector(onNestedScrollWithADXCoordinatorLayout:withADView:withADView:withInt:withInt:withInt:withInt:);
  methods[15].selector = @selector(onNestedScrollWithADXCoordinatorLayout:withADView:withADView:withInt:withInt:withInt:withInt:withInt:);
  methods[16].selector = @selector(onNestedScrollWithADXCoordinatorLayout:withADView:withADView:withInt:withInt:withInt:withInt:withInt:withIntArray:);
  methods[17].selector = @selector(onNestedPreScrollWithADXCoordinatorLayout:withADView:withADView:withInt:withInt:withIntArray:);
  methods[18].selector = @selector(onNestedPreScrollWithADXCoordinatorLayout:withADView:withADView:withInt:withInt:withIntArray:withInt:);
  methods[19].selector = @selector(onNestedFlingWithADXCoordinatorLayout:withADView:withADView:withFloat:withFloat:withBoolean:);
  methods[20].selector = @selector(onNestedPreFlingWithADXCoordinatorLayout:withADView:withADView:withFloat:withFloat:);
  methods[21].selector = @selector(getInsetDodgeRectWithADXCoordinatorLayout:withADView:withADRect:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onAttachedToLayoutParams", "LADXCoordinatorLayout_LayoutParams;", "layoutDependsOn", "LADXCoordinatorLayout;LADView;LADView;", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;)Z", "onDependentViewChanged", "onDependentViewRemoved", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;)V", "onMeasureChild", "LADXCoordinatorLayout;LADView;IIII", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;IIII)Z", "onLayoutChild", "LADXCoordinatorLayout;LADView;I", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;I)Z", "onStartNestedScroll", "LADXCoordinatorLayout;LADView;LADView;LADView;I", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;Lr/android/view/View;I)Z", "LADXCoordinatorLayout;LADView;LADView;LADView;II", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;Lr/android/view/View;II)Z", "onNestedScrollAccepted", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;Lr/android/view/View;I)V", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;Lr/android/view/View;II)V", "onStopNestedScroll", "LADXCoordinatorLayout;LADView;LADView;I", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;I)V", "onNestedScroll", "LADXCoordinatorLayout;LADView;LADView;IIII", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;IIII)V", "LADXCoordinatorLayout;LADView;LADView;IIIII", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;IIIII)V", "LADXCoordinatorLayout;LADView;LADView;IIIII[I", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;IIIII[I)V", "onNestedPreScroll", "LADXCoordinatorLayout;LADView;LADView;II[I", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;II[I)V", "LADXCoordinatorLayout;LADView;LADView;II[II", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;II[II)V", "onNestedFling", "LADXCoordinatorLayout;LADView;LADView;FFZ", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;FFZ)Z", "onNestedPreFling", "LADXCoordinatorLayout;LADView;LADView;FF", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/view/View;FF)Z", "getInsetDodgeRect", "LADXCoordinatorLayout;LADView;LADRect;", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;Lr/android/graphics/Rect;)Z", "LADXCoordinatorLayout;", "<V:Lr/android/view/View;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADXCoordinatorLayout_Behavior = { "Behavior", "androidx.coordinatorlayout.widget", ptrTable, methods, NULL, 7, 0x409, 22, 0, 46, -1, -1, 47, -1 };
  return &_ADXCoordinatorLayout_Behavior;
}

@end

void ADXCoordinatorLayout_Behavior_init(ADXCoordinatorLayout_Behavior *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCoordinatorLayout_Behavior)

@implementation ADXCoordinatorLayout_LayoutParams

- (instancetype)initWithInt:(int32_t)width
                    withInt:(int32_t)height {
  ADXCoordinatorLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithADXCoordinatorLayout_LayoutParams:(ADXCoordinatorLayout_LayoutParams *)p {
  ADXCoordinatorLayout_LayoutParams_initWithADXCoordinatorLayout_LayoutParams_(self, p);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  ADXCoordinatorLayout_LayoutParams_initWithADViewGroup_LayoutParams_(self, p);
  return self;
}

- (int32_t)getAnchorId {
  return mAnchorId_;
}

- (void)setAnchorIdWithInt:(int32_t)id_ {
  [self invalidateAnchor];
  mAnchorId_ = id_;
}

- (ADXCoordinatorLayout_Behavior *)getBehavior {
  return mBehavior_;
}

- (void)setBehaviorWithADXCoordinatorLayout_Behavior:(ADXCoordinatorLayout_Behavior *)behavior {
  if (!JreObjectEqualsEquals(mBehavior_, behavior)) {
    if (mBehavior_ != nil) {
      [mBehavior_ onDetachedFromLayoutParams];
    }
    JreStrongAssign(&mBehavior_, behavior);
    JreStrongAssign(&mBehaviorTag_, nil);
    mBehaviorResolved_ = true;
    if (behavior != nil) {
      [behavior onAttachedToLayoutParamsWithADXCoordinatorLayout_LayoutParams:self];
    }
  }
}

- (void)setLastChildRectWithADRect:(ADRect *)r {
  [((ADRect *) nil_chk(mLastChildRect_)) setWithADRect:r];
}

- (ADRect *)getLastChildRect {
  return mLastChildRect_;
}

- (bool)checkAnchorChanged {
  return mAnchorView_ == nil && mAnchorId_ != ADView_NO_ID;
}

- (void)resetNestedScrollWithInt:(int32_t)type {
  [self setNestedScrollAcceptedWithInt:type withBoolean:false];
}

- (void)setNestedScrollAcceptedWithInt:(int32_t)type
                           withBoolean:(bool)accept {
  switch (type) {
    case ADXViewCompat_TYPE_TOUCH:
    mDidAcceptNestedScrollTouch_ = accept;
    break;
    case ADXViewCompat_TYPE_NON_TOUCH:
    mDidAcceptNestedScrollNonTouch_ = accept;
    break;
  }
}

- (bool)isNestedScrollAcceptedWithInt:(int32_t)type {
  switch (type) {
    case ADXViewCompat_TYPE_TOUCH:
    return mDidAcceptNestedScrollTouch_;
    case ADXViewCompat_TYPE_NON_TOUCH:
    return mDidAcceptNestedScrollNonTouch_;
  }
  return false;
}

- (bool)getChangedAfterNestedScroll {
  return mDidChangeAfterNestedScroll_;
}

- (void)setChangedAfterNestedScrollWithBoolean:(bool)changed {
  mDidChangeAfterNestedScroll_ = changed;
}

- (void)resetChangedAfterNestedScroll {
  mDidChangeAfterNestedScroll_ = false;
}

- (bool)dependsOnWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                               withADView:(ADView *)child
                               withADView:(ADView *)dependency {
  return JreObjectEqualsEquals(dependency, mAnchorDirectChild_) || ADXCoordinatorLayout_LayoutParams_shouldDodgeWithADView_withInt_(self, dependency, ADXViewCompat_getLayoutDirectionWithADView_(parent)) || (mBehavior_ != nil && [mBehavior_ layoutDependsOnWithADXCoordinatorLayout:parent withADView:child withADView:dependency]);
}

- (void)invalidateAnchor {
  JreStrongAssign(&mAnchorView_, JreStrongAssign(&mAnchorDirectChild_, nil));
}

- (ADView *)findAnchorViewWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                        withADView:(ADView *)forChild {
  if (mAnchorId_ == ADView_NO_ID) {
    JreStrongAssign(&mAnchorView_, JreStrongAssign(&mAnchorDirectChild_, nil));
    return nil;
  }
  if (mAnchorView_ == nil || !ADXCoordinatorLayout_LayoutParams_verifyAnchorViewWithADView_withADXCoordinatorLayout_(self, forChild, parent)) {
    ADXCoordinatorLayout_LayoutParams_resolveAnchorViewWithADView_withADXCoordinatorLayout_(self, forChild, parent);
  }
  return mAnchorView_;
}

- (void)resolveAnchorViewWithADView:(ADView *)forChild
           withADXCoordinatorLayout:(ADXCoordinatorLayout *)parent {
  ADXCoordinatorLayout_LayoutParams_resolveAnchorViewWithADView_withADXCoordinatorLayout_(self, forChild, parent);
}

- (bool)verifyAnchorViewWithADView:(ADView *)forChild
          withADXCoordinatorLayout:(ADXCoordinatorLayout *)parent {
  return ADXCoordinatorLayout_LayoutParams_verifyAnchorViewWithADView_withADXCoordinatorLayout_(self, forChild, parent);
}

- (bool)shouldDodgeWithADView:(ADView *)other
                      withInt:(int32_t)layoutDirection {
  return ADXCoordinatorLayout_LayoutParams_shouldDodgeWithADView_withInt_(self, other, layoutDirection);
}

- (void)dealloc {
  RELEASE_(mBehavior_);
  RELEASE_(mAnchorView_);
  RELEASE_(mAnchorDirectChild_);
  RELEASE_(mLastChildRect_);
  RELEASE_(mBehaviorTag_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADXCoordinatorLayout_Behavior;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LADRect;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 12, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 21, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithADXCoordinatorLayout_LayoutParams:);
  methods[2].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[3].selector = @selector(getAnchorId);
  methods[4].selector = @selector(setAnchorIdWithInt:);
  methods[5].selector = @selector(getBehavior);
  methods[6].selector = @selector(setBehaviorWithADXCoordinatorLayout_Behavior:);
  methods[7].selector = @selector(setLastChildRectWithADRect:);
  methods[8].selector = @selector(getLastChildRect);
  methods[9].selector = @selector(checkAnchorChanged);
  methods[10].selector = @selector(resetNestedScrollWithInt:);
  methods[11].selector = @selector(setNestedScrollAcceptedWithInt:withBoolean:);
  methods[12].selector = @selector(isNestedScrollAcceptedWithInt:);
  methods[13].selector = @selector(getChangedAfterNestedScroll);
  methods[14].selector = @selector(setChangedAfterNestedScrollWithBoolean:);
  methods[15].selector = @selector(resetChangedAfterNestedScroll);
  methods[16].selector = @selector(dependsOnWithADXCoordinatorLayout:withADView:withADView:);
  methods[17].selector = @selector(invalidateAnchor);
  methods[18].selector = @selector(findAnchorViewWithADXCoordinatorLayout:withADView:);
  methods[19].selector = @selector(resolveAnchorViewWithADView:withADXCoordinatorLayout:);
  methods[20].selector = @selector(verifyAnchorViewWithADView:withADXCoordinatorLayout:);
  methods[21].selector = @selector(shouldDodgeWithADView:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mBehavior_", "LADXCoordinatorLayout_Behavior;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mBehaviorResolved_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "gravity_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "anchorGravity_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "keyline_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mAnchorId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "insetEdge_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dodgeInsetEdges_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mInsetOffsetX_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInsetOffsetY_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mAnchorView_", "LADView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mAnchorDirectChild_", "LADView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDidBlockInteraction_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDidAcceptNestedScrollTouch_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDidAcceptNestedScrollNonTouch_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDidChangeAfterNestedScroll_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastChildRect_", "LADRect;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mBehaviorTag_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LADXCoordinatorLayout_LayoutParams;", "LADViewGroup_LayoutParams;", "setAnchorId", "I", "setBehavior", "LADXCoordinatorLayout_Behavior;", "setLastChildRect", "LADRect;", "resetNestedScroll", "setNestedScrollAccepted", "IZ", "isNestedScrollAccepted", "setChangedAfterNestedScroll", "Z", "dependsOn", "LADXCoordinatorLayout;LADView;LADView;", "findAnchorView", "LADXCoordinatorLayout;LADView;", "resolveAnchorView", "LADView;LADXCoordinatorLayout;", "verifyAnchorView", "shouldDodge", "LADView;I", "LADXCoordinatorLayout;" };
  static const J2ObjcClassInfo _ADXCoordinatorLayout_LayoutParams = { "LayoutParams", "androidx.coordinatorlayout.widget", ptrTable, methods, fields, 7, 0x9, 22, 18, 24, -1, -1, -1, -1 };
  return &_ADXCoordinatorLayout_LayoutParams;
}

@end

void ADXCoordinatorLayout_LayoutParams_initWithInt_withInt_(ADXCoordinatorLayout_LayoutParams *self, int32_t width, int32_t height) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  self->mBehaviorResolved_ = false;
  self->gravity_ = ADGravity_NO_GRAVITY;
  self->anchorGravity_ = ADGravity_NO_GRAVITY;
  self->keyline_ = -1;
  self->mAnchorId_ = ADView_NO_ID;
  self->insetEdge_ = ADGravity_NO_GRAVITY;
  self->dodgeInsetEdges_ = ADGravity_NO_GRAVITY;
  JreStrongAssignAndConsume(&self->mLastChildRect_, new_ADRect_init());
}

ADXCoordinatorLayout_LayoutParams *new_ADXCoordinatorLayout_LayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_NEW_IMPL(ADXCoordinatorLayout_LayoutParams, initWithInt_withInt_, width, height)
}

ADXCoordinatorLayout_LayoutParams *create_ADXCoordinatorLayout_LayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_CREATE_IMPL(ADXCoordinatorLayout_LayoutParams, initWithInt_withInt_, width, height)
}

void ADXCoordinatorLayout_LayoutParams_initWithADXCoordinatorLayout_LayoutParams_(ADXCoordinatorLayout_LayoutParams *self, ADXCoordinatorLayout_LayoutParams *p) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(self, p);
  self->mBehaviorResolved_ = false;
  self->gravity_ = ADGravity_NO_GRAVITY;
  self->anchorGravity_ = ADGravity_NO_GRAVITY;
  self->keyline_ = -1;
  self->mAnchorId_ = ADView_NO_ID;
  self->insetEdge_ = ADGravity_NO_GRAVITY;
  self->dodgeInsetEdges_ = ADGravity_NO_GRAVITY;
  JreStrongAssignAndConsume(&self->mLastChildRect_, new_ADRect_init());
}

ADXCoordinatorLayout_LayoutParams *new_ADXCoordinatorLayout_LayoutParams_initWithADXCoordinatorLayout_LayoutParams_(ADXCoordinatorLayout_LayoutParams *p) {
  J2OBJC_NEW_IMPL(ADXCoordinatorLayout_LayoutParams, initWithADXCoordinatorLayout_LayoutParams_, p)
}

ADXCoordinatorLayout_LayoutParams *create_ADXCoordinatorLayout_LayoutParams_initWithADXCoordinatorLayout_LayoutParams_(ADXCoordinatorLayout_LayoutParams *p) {
  J2OBJC_CREATE_IMPL(ADXCoordinatorLayout_LayoutParams, initWithADXCoordinatorLayout_LayoutParams_, p)
}

void ADXCoordinatorLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADXCoordinatorLayout_LayoutParams *self, ADViewGroup_LayoutParams *p) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, p);
  self->mBehaviorResolved_ = false;
  self->gravity_ = ADGravity_NO_GRAVITY;
  self->anchorGravity_ = ADGravity_NO_GRAVITY;
  self->keyline_ = -1;
  self->mAnchorId_ = ADView_NO_ID;
  self->insetEdge_ = ADGravity_NO_GRAVITY;
  self->dodgeInsetEdges_ = ADGravity_NO_GRAVITY;
  JreStrongAssignAndConsume(&self->mLastChildRect_, new_ADRect_init());
}

ADXCoordinatorLayout_LayoutParams *new_ADXCoordinatorLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *p) {
  J2OBJC_NEW_IMPL(ADXCoordinatorLayout_LayoutParams, initWithADViewGroup_LayoutParams_, p)
}

ADXCoordinatorLayout_LayoutParams *create_ADXCoordinatorLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *p) {
  J2OBJC_CREATE_IMPL(ADXCoordinatorLayout_LayoutParams, initWithADViewGroup_LayoutParams_, p)
}

void ADXCoordinatorLayout_LayoutParams_resolveAnchorViewWithADView_withADXCoordinatorLayout_(ADXCoordinatorLayout_LayoutParams *self, ADView *forChild, ADXCoordinatorLayout *parent) {
  JreStrongAssign(&self->mAnchorView_, [((ADXCoordinatorLayout *) nil_chk(parent)) findViewByIdWithInt:self->mAnchorId_]);
  if (self->mAnchorView_ != nil) {
    if (JreObjectEqualsEquals(self->mAnchorView_, parent)) {
      if ([parent isInEditMode]) {
        JreStrongAssign(&self->mAnchorView_, JreStrongAssign(&self->mAnchorDirectChild_, nil));
        return;
      }
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"View can not be anchored to the the parent CoordinatorLayout");
    }
    ADView *directChild = JreRetainedLocalValue(self->mAnchorView_);
    for (id<ADViewParent> p = JreRetainedLocalValue([self->mAnchorView_ getParent]); !JreObjectEqualsEquals(p, parent) && p != nil; p = [p getParent]) {
      if (JreObjectEqualsEquals(p, forChild)) {
        if ([parent isInEditMode]) {
          JreStrongAssign(&self->mAnchorView_, JreStrongAssign(&self->mAnchorDirectChild_, nil));
          return;
        }
        @throw create_JavaLangIllegalStateException_initWithNSString_(@"Anchor must not be a descendant of the anchored view");
      }
      if ([p isKindOfClass:[ADView class]]) {
        directChild = (ADView *) p;
      }
    }
    JreStrongAssign(&self->mAnchorDirectChild_, directChild);
  }
  else {
    if ([parent isInEditMode]) {
      JreStrongAssign(&self->mAnchorView_, JreStrongAssign(&self->mAnchorDirectChild_, nil));
      return;
    }
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$@", @"Could not find CoordinatorLayout descendant view with id ", [((ADResources *) nil_chk([parent getResources])) getResourceNameWithInt:self->mAnchorId_], @" to anchor view ", forChild));
  }
}

bool ADXCoordinatorLayout_LayoutParams_verifyAnchorViewWithADView_withADXCoordinatorLayout_(ADXCoordinatorLayout_LayoutParams *self, ADView *forChild, ADXCoordinatorLayout *parent) {
  if ([((ADView *) nil_chk(self->mAnchorView_)) getId] != self->mAnchorId_) {
    return false;
  }
  ADView *directChild = JreRetainedLocalValue(self->mAnchorView_);
  for (id<ADViewParent> p = JreRetainedLocalValue([((ADView *) nil_chk(self->mAnchorView_)) getParent]); !JreObjectEqualsEquals(p, parent); p = [p getParent]) {
    if (p == nil || JreObjectEqualsEquals(p, forChild)) {
      JreStrongAssign(&self->mAnchorView_, JreStrongAssign(&self->mAnchorDirectChild_, nil));
      return false;
    }
    if ([p isKindOfClass:[ADView class]]) {
      directChild = (ADView *) p;
    }
  }
  JreStrongAssign(&self->mAnchorDirectChild_, directChild);
  return true;
}

bool ADXCoordinatorLayout_LayoutParams_shouldDodgeWithADView_withInt_(ADXCoordinatorLayout_LayoutParams *self, ADView *other, int32_t layoutDirection) {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(other)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  int32_t absInset = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->insetEdge_, layoutDirection);
  return absInset != ADGravity_NO_GRAVITY && (absInset & ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(self->dodgeInsetEdges_, layoutDirection)) == absInset;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCoordinatorLayout_LayoutParams)

@implementation ADXCoordinatorLayout_WindowInsetsCompat

- (instancetype)initWithADXCoordinatorLayout:(ADXCoordinatorLayout *)outer$ {
  ADXCoordinatorLayout_WindowInsetsCompat_initWithADXCoordinatorLayout_(self, outer$);
  return self;
}

- (int32_t)getSystemWindowInsetLeft {
  return 0;
}

- (int32_t)getSystemWindowInsetBottom {
  return 0;
}

- (int32_t)getSystemWindowInsetTop {
  return 0;
}

- (int32_t)getSystemWindowInsetRight {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXCoordinatorLayout:);
  methods[1].selector = @selector(getSystemWindowInsetLeft);
  methods[2].selector = @selector(getSystemWindowInsetBottom);
  methods[3].selector = @selector(getSystemWindowInsetTop);
  methods[4].selector = @selector(getSystemWindowInsetRight);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXCoordinatorLayout;" };
  static const J2ObjcClassInfo _ADXCoordinatorLayout_WindowInsetsCompat = { "WindowInsetsCompat", "androidx.coordinatorlayout.widget", ptrTable, methods, NULL, 7, 0x0, 5, 0, 0, -1, -1, -1, -1 };
  return &_ADXCoordinatorLayout_WindowInsetsCompat;
}

@end

void ADXCoordinatorLayout_WindowInsetsCompat_initWithADXCoordinatorLayout_(ADXCoordinatorLayout_WindowInsetsCompat *self, ADXCoordinatorLayout *outer$) {
  NSObject_init(self);
}

ADXCoordinatorLayout_WindowInsetsCompat *new_ADXCoordinatorLayout_WindowInsetsCompat_initWithADXCoordinatorLayout_(ADXCoordinatorLayout *outer$) {
  J2OBJC_NEW_IMPL(ADXCoordinatorLayout_WindowInsetsCompat, initWithADXCoordinatorLayout_, outer$)
}

ADXCoordinatorLayout_WindowInsetsCompat *create_ADXCoordinatorLayout_WindowInsetsCompat_initWithADXCoordinatorLayout_(ADXCoordinatorLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADXCoordinatorLayout_WindowInsetsCompat, initWithADXCoordinatorLayout_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCoordinatorLayout_WindowInsetsCompat)

@implementation ADXCoordinatorLayout_ViewGroupUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCoordinatorLayout_ViewGroupUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)getDescendantRectWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                       withADView:(ADView *)descendant
                                       withADRect:(ADRect *)outArg {
  ADXCoordinatorLayout_ViewGroupUtils_getDescendantRectWithADXCoordinatorLayout_withADView_withADRect_(coordinatorLayout, descendant, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDescendantRectWithADXCoordinatorLayout:withADView:withADRect:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getDescendantRect", "LADXCoordinatorLayout;LADView;LADRect;", "LADXCoordinatorLayout;" };
  static const J2ObjcClassInfo _ADXCoordinatorLayout_ViewGroupUtils = { "ViewGroupUtils", "androidx.coordinatorlayout.widget", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADXCoordinatorLayout_ViewGroupUtils;
}

@end

void ADXCoordinatorLayout_ViewGroupUtils_init(ADXCoordinatorLayout_ViewGroupUtils *self) {
  NSObject_init(self);
}

ADXCoordinatorLayout_ViewGroupUtils *new_ADXCoordinatorLayout_ViewGroupUtils_init() {
  J2OBJC_NEW_IMPL(ADXCoordinatorLayout_ViewGroupUtils, init)
}

ADXCoordinatorLayout_ViewGroupUtils *create_ADXCoordinatorLayout_ViewGroupUtils_init() {
  J2OBJC_CREATE_IMPL(ADXCoordinatorLayout_ViewGroupUtils, init)
}

void ADXCoordinatorLayout_ViewGroupUtils_getDescendantRectWithADXCoordinatorLayout_withADView_withADRect_(ADXCoordinatorLayout *coordinatorLayout, ADView *descendant, ADRect *outArg) {
  ADXCoordinatorLayout_ViewGroupUtils_initialize();
  [((ADRect *) nil_chk(outArg)) setWithInt:[((ADView *) nil_chk(descendant)) getLeft] withInt:[descendant getTop] withInt:[descendant getRight] withInt:[descendant getBottom]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCoordinatorLayout_ViewGroupUtils)
