//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidXJCoordinatorLayout\src\main\java\androidx\coordinatorlayout\widget\DirectedAcyclicGraph.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "DirectedAcyclicGraph.h"
#include "J2ObjC_source.h"
#include "Pools.h"
#include "SimpleArrayMap.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXDirectedAcyclicGraph () {
 @public
  id<ADPools_Pool> mListPool_;
  ADXSimpleArrayMap *mGraph_;
  JavaUtilArrayList *mSortResult_;
  JavaUtilHashSet *mSortTmpMarked_;
}

- (void)dfsWithId:(id)node
withJavaUtilArrayList:(JavaUtilArrayList *)result
withJavaUtilHashSet:(JavaUtilHashSet *)tmpMarked;

- (JavaUtilArrayList *)getEmptyList;

- (void)poolListWithJavaUtilArrayList:(JavaUtilArrayList *)list;

@end

J2OBJC_FIELD_SETTER(ADXDirectedAcyclicGraph, mListPool_, id<ADPools_Pool>)
J2OBJC_FIELD_SETTER(ADXDirectedAcyclicGraph, mGraph_, ADXSimpleArrayMap *)
J2OBJC_FIELD_SETTER(ADXDirectedAcyclicGraph, mSortResult_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXDirectedAcyclicGraph, mSortTmpMarked_, JavaUtilHashSet *)

__attribute__((unused)) static void ADXDirectedAcyclicGraph_dfsWithId_withJavaUtilArrayList_withJavaUtilHashSet_(ADXDirectedAcyclicGraph *self, id node, JavaUtilArrayList *result, JavaUtilHashSet *tmpMarked);

__attribute__((unused)) static JavaUtilArrayList *ADXDirectedAcyclicGraph_getEmptyList(ADXDirectedAcyclicGraph *self);

__attribute__((unused)) static void ADXDirectedAcyclicGraph_poolListWithJavaUtilArrayList_(ADXDirectedAcyclicGraph *self, JavaUtilArrayList *list);

@implementation ADXDirectedAcyclicGraph

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXDirectedAcyclicGraph_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addNodeWithId:(id)node {
  if (![((ADXSimpleArrayMap *) nil_chk(mGraph_)) containsKeyWithId:node]) {
    [mGraph_ putWithId:node withId:nil];
  }
}

- (bool)containsWithId:(id)node {
  return [((ADXSimpleArrayMap *) nil_chk(mGraph_)) containsKeyWithId:node];
}

- (void)addEdgeWithId:(id)node
               withId:(id)incomingEdge {
  if (![((ADXSimpleArrayMap *) nil_chk(mGraph_)) containsKeyWithId:node] || ![mGraph_ containsKeyWithId:incomingEdge]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"All nodes must be present in the graph before being added as an edge");
  }
  JavaUtilArrayList *edges = JreRetainedLocalValue([mGraph_ getWithId:node]);
  if (edges == nil) {
    edges = ADXDirectedAcyclicGraph_getEmptyList(self);
    [mGraph_ putWithId:node withId:edges];
  }
  [((JavaUtilArrayList *) nil_chk(edges)) addWithId:incomingEdge];
}

- (id<JavaUtilList>)getIncomingEdgesWithId:(id)node {
  JavaUtilArrayList *result = JreRetainedLocalValue([self getIncomingEdgesInternalWithId:node]);
  if (result == nil) {
    return nil;
  }
  else {
    return create_JavaUtilArrayList_initWithJavaUtilCollection_(result);
  }
}

- (JavaUtilArrayList *)getIncomingEdgesInternalWithId:(id)node {
  return [((ADXSimpleArrayMap *) nil_chk(mGraph_)) getWithId:node];
}

- (id<JavaUtilList>)getOutgoingEdgesWithId:(id)node {
  JavaUtilArrayList *result = nil;
  for (int32_t i = 0, size = [((ADXSimpleArrayMap *) nil_chk(mGraph_)) size]; i < size; i++) {
    JavaUtilArrayList *edges = JreRetainedLocalValue([mGraph_ valueAtWithInt:i]);
    if (edges != nil && [edges containsWithId:node]) {
      if (result == nil) {
        result = create_JavaUtilArrayList_init();
      }
      [result addWithId:[mGraph_ keyAtWithInt:i]];
    }
  }
  return result;
}

- (bool)hasOutgoingEdgesWithId:(id)node {
  for (int32_t i = 0, size = [((ADXSimpleArrayMap *) nil_chk(mGraph_)) size]; i < size; i++) {
    JavaUtilArrayList *edges = JreRetainedLocalValue([mGraph_ valueAtWithInt:i]);
    if (edges != nil && [edges containsWithId:node]) {
      return true;
    }
  }
  return false;
}

- (void)clear {
  for (int32_t i = 0, size = [((ADXSimpleArrayMap *) nil_chk(mGraph_)) size]; i < size; i++) {
    JavaUtilArrayList *edges = JreRetainedLocalValue([mGraph_ valueAtWithInt:i]);
    if (edges != nil) {
      ADXDirectedAcyclicGraph_poolListWithJavaUtilArrayList_(self, edges);
    }
  }
  [mGraph_ clear];
}

- (JavaUtilArrayList *)getSortedList {
  [((JavaUtilArrayList *) nil_chk(mSortResult_)) clear];
  [((JavaUtilHashSet *) nil_chk(mSortTmpMarked_)) clear];
  for (int32_t i = 0, size = [((ADXSimpleArrayMap *) nil_chk(mGraph_)) size]; i < size; i++) {
    ADXDirectedAcyclicGraph_dfsWithId_withJavaUtilArrayList_withJavaUtilHashSet_(self, [mGraph_ keyAtWithInt:i], mSortResult_, mSortTmpMarked_);
  }
  return mSortResult_;
}

- (void)dfsWithId:(id)node
withJavaUtilArrayList:(JavaUtilArrayList *)result
withJavaUtilHashSet:(JavaUtilHashSet *)tmpMarked {
  ADXDirectedAcyclicGraph_dfsWithId_withJavaUtilArrayList_withJavaUtilHashSet_(self, node, result, tmpMarked);
}

- (int32_t)size {
  return [((ADXSimpleArrayMap *) nil_chk(mGraph_)) size];
}

- (JavaUtilArrayList *)getEmptyList {
  return ADXDirectedAcyclicGraph_getEmptyList(self);
}

- (void)poolListWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  ADXDirectedAcyclicGraph_poolListWithJavaUtilArrayList_(self, list);
}

- (void)dealloc {
  RELEASE_(mListPool_);
  RELEASE_(mGraph_);
  RELEASE_(mSortResult_);
  RELEASE_(mSortTmpMarked_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 8, 1, -1, 9, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x0, 10, 1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 12, 1, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 13, 1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, 17, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x2, -1, -1, -1, 14, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, 20, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addNodeWithId:);
  methods[2].selector = @selector(containsWithId:);
  methods[3].selector = @selector(addEdgeWithId:withId:);
  methods[4].selector = @selector(getIncomingEdgesWithId:);
  methods[5].selector = @selector(getIncomingEdgesInternalWithId:);
  methods[6].selector = @selector(getOutgoingEdgesWithId:);
  methods[7].selector = @selector(hasOutgoingEdgesWithId:);
  methods[8].selector = @selector(clear);
  methods[9].selector = @selector(getSortedList);
  methods[10].selector = @selector(dfsWithId:withJavaUtilArrayList:withJavaUtilHashSet:);
  methods[11].selector = @selector(size);
  methods[12].selector = @selector(getEmptyList);
  methods[13].selector = @selector(poolListWithJavaUtilArrayList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mListPool_", "LADPools_Pool;", .constantValue.asLong = 0, 0x12, -1, -1, 21, -1 },
    { "mGraph_", "LADXSimpleArrayMap;", .constantValue.asLong = 0, 0x12, -1, -1, 22, -1 },
    { "mSortResult_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 23, -1 },
    { "mSortTmpMarked_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x12, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "addNode", "LNSObject;", "(TT;)V", "contains", "(TT;)Z", "addEdge", "LNSObject;LNSObject;", "(TT;TT;)V", "getIncomingEdges", "(TT;)Ljava/util/List<TT;>;", "getIncomingEdgesInternal", "(TT;)Ljava/util/ArrayList<TT;>;", "getOutgoingEdges", "hasOutgoingEdges", "()Ljava/util/ArrayList<TT;>;", "dfs", "LNSObject;LJavaUtilArrayList;LJavaUtilHashSet;", "(TT;Ljava/util/ArrayList<TT;>;Ljava/util/HashSet<TT;>;)V", "poolList", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<TT;>;)V", "Lr/android/util/Pools$Pool<Ljava/util/ArrayList<TT;>;>;", "Landroidx/collection/SimpleArrayMap<TT;Ljava/util/ArrayList<TT;>;>;", "Ljava/util/ArrayList<TT;>;", "Ljava/util/HashSet<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADXDirectedAcyclicGraph = { "DirectedAcyclicGraph", "androidx.coordinatorlayout.widget", ptrTable, methods, fields, 7, 0x11, 14, 4, -1, -1, -1, 25, -1 };
  return &_ADXDirectedAcyclicGraph;
}

@end

void ADXDirectedAcyclicGraph_init(ADXDirectedAcyclicGraph *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mListPool_, new_ADPools_SimplePool_initWithInt_(10));
  JreStrongAssignAndConsume(&self->mGraph_, new_ADXSimpleArrayMap_init());
  JreStrongAssignAndConsume(&self->mSortResult_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mSortTmpMarked_, new_JavaUtilHashSet_init());
}

ADXDirectedAcyclicGraph *new_ADXDirectedAcyclicGraph_init() {
  J2OBJC_NEW_IMPL(ADXDirectedAcyclicGraph, init)
}

ADXDirectedAcyclicGraph *create_ADXDirectedAcyclicGraph_init() {
  J2OBJC_CREATE_IMPL(ADXDirectedAcyclicGraph, init)
}

void ADXDirectedAcyclicGraph_dfsWithId_withJavaUtilArrayList_withJavaUtilHashSet_(ADXDirectedAcyclicGraph *self, id node, JavaUtilArrayList *result, JavaUtilHashSet *tmpMarked) {
  if ([((JavaUtilArrayList *) nil_chk(result)) containsWithId:node]) {
    return;
  }
  if ([((JavaUtilHashSet *) nil_chk(tmpMarked)) containsWithId:node]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"This graph contains cyclic dependencies");
  }
  [tmpMarked addWithId:node];
  JavaUtilArrayList *edges = [((ADXSimpleArrayMap *) nil_chk(self->mGraph_)) getWithId:node];
  if (edges != nil) {
    for (int32_t i = 0, size = [edges size]; i < size; i++) {
      ADXDirectedAcyclicGraph_dfsWithId_withJavaUtilArrayList_withJavaUtilHashSet_(self, [edges getWithInt:i], result, tmpMarked);
    }
  }
  [tmpMarked removeWithId:node];
  [result addWithId:node];
}

JavaUtilArrayList *ADXDirectedAcyclicGraph_getEmptyList(ADXDirectedAcyclicGraph *self) {
  JavaUtilArrayList *list = JreRetainedLocalValue([((id<ADPools_Pool>) nil_chk(self->mListPool_)) acquire]);
  if (list == nil) {
    list = create_JavaUtilArrayList_init();
  }
  return list;
}

void ADXDirectedAcyclicGraph_poolListWithJavaUtilArrayList_(ADXDirectedAcyclicGraph *self, JavaUtilArrayList *list) {
  [((JavaUtilArrayList *) nil_chk(list)) clear];
  [((id<ADPools_Pool>) nil_chk(self->mListPool_)) release__WithId:list];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDirectedAcyclicGraph)

J2OBJC_NAME_MAPPING(ADXDirectedAcyclicGraph, "androidx.coordinatorlayout.widget", "ADX")
